{
  "html": [
    {
      "paragraph": "<p>Coding, or <i>programming</i>, is a skill that lets you tell computers or other hardware what you want them to do with lines of code that they can understand and execute. (This website is made by lines of code, too!)</p><p>There are many different programming languages, each specified for a different task. Here are some languages involved in web development:<br /></p><ul><li><strong> HTML</strong> (Hyper Text Markup Language) makes a website's contents and structures.</li><li><strong> CSS</strong> (Cascading Style Sheets) makes a website look better by changing its styling and looks.</li><li><strong> JavaScript</strong> makes a website more interactive, responsive, and dynamic.</li></ul><br /><img src=\"/media/coding1.jpg\" alt=\"Coding Image\" /><figcaption>An example of some HTML markup code.</figcaption><p>Coding can improve your logical thinking skill. Having a clear, logical, and understandable structure of codes is really important.</p><p>It also trains your patience. You <i>will</i> experience bugs and frustration very often. But being patient to debug again and again and review your code again and again is an important skill to learn.</p><p><strong>Summary:</strong><br />Coding is a very important skill to learn in the 21st century. People code to control computers to do different things. There are different kinds of coding languages, each with its own purpose to handle a task.</p>",
      "unit": "The Very Basics",
      "articleName": "What is Coding?",
      "articleDate": "2.19.2024",
      "articleRelease": "2.11.2023",
      "author": "Tony",
      "id": 0
    },
    {
      "paragraph": "<p>To code a good and functional website, you need at least 3 coding languages: <strong><i>HTML, CSS, and JavaScript</i></strong>.</p><img src=\"/media/coding8.png\" alt=\"HTML5\" style=\"width: 40%; margin-inline: 30%\"/><figcaption>HTML5 is the current version of HTML.</figcaption><p>HTML is like a house's bricks; it makes the structure and content of a website. <strong>HTML</strong> stands for <strong>Hyper Text Markup Language</strong>, which means it is a programming language that <strong>marks up texts using tags</strong> like these: <code>&lt;h1&gt;Hello World!&lt;/h1&gt;</code></p><p>Congratulations! If you are new here, you just saw your first line of code! See the tags \"&lt;h1&gt; &lt;/h1&gt;\" around the text \"Hello World!\"? They tell the browser that the text inside the tags is a heading. The tags &lt;h1&gt; &lt;/h1&gt; mean the content between them is a level one heading. This is the result of that code:</p><h1 style=\"padding-block: 0\">Hello World!</h1><p>There are some other kinds of tags beside &lt;h1&gt; and &lt;/h1&gt;, but most of them each have <strong>two matching tags wrapping up things like texts, codes, or even other tags.</strong> And notice the second tag wraps up the text, and <strong>it has a slash / before h1</strong>: &lt;/h1&gt;</p><p>Tags and content inside them all together are called an \"element\", so <strong>\"&lt;h1&gt;Hello World!&lt;/h1&gt;\"</strong> is an example of an element.</p><p><strong>Summary:</strong><br />HTML marks up the structure and the content of a website, it has many different tags and most of them have two matching tags. Two tags mark up an \"element\". The second tag ends the element, and has an extra slash in the tag.</p><p>If you want to learn more HTML tags, click the Next button to see more!</p>",
      "unit": "The Very Basics",
      "articleName": "What is HTML?",
      "articleDate": "2.19.2024",
      "articleRelease": "2.13.2023",
      "author": "Tony",
      "id": 1
    },
    {
      "paragraph": "<p>We already introduced the &lth1&gt tags in the <a href=\"what-is-html.html\">previous article</a>. Here are some more HTML tags that you can use to make your website more content-rich and informational. You can open up VS Code and follow along.</p><h2>1. The basic tags</h2><p>All the tags below are very important and are required for your HTML webpage to work properly, because they form the basic structure of a webpage.</p><table><thead><tr><th>Tag name</th><th>Usage</th></tr></thead><tr><td>&lt!DOCTYPE html&gt</td><td>It tells the browser that the document language is HTML, and it doesn't have a closing tag.</td></tr><tr><td>&lthtml&gt &lt/html&gt</td><td>These tags wrap up the entire HTML part (&lthead&gt &lt/head&gt and &ltbody&gt &lt/body&gt)</td></tr><tr><td>&lthead&gt &lt/head&gt</td><td>These tags wrap up all the page information that is not included in &ltbody&gt &lt/body&gt tags.</td></tr><tr><td>&ltbody&gt &lt/body&gt</td><td>These tags are in the same level as the head tags. They wrap up all the visible content.</td></tr><tr><td>&lttitle&gt &lt/title&gt</td><td>These tags are wrapped inside the head tags. The text inside shows on the browser tab title.</td></tr></table><p>You can type all the tags above by creating a new HTML file in VS Code and type \"!\" then hit enter. All the tags should appear like this:</p><img src=\"/media/coding9.png\" alt=\"Tags\" style=\"width: 88%; margin-inline: 6%\"/><p>You can change anything and see what happens. The best way to learn is by doing it <i>yourself</i>.</p><h2>2. Other common tags</h2><p>All the tags below are very common and important. It's always good to try, practice, and remember them to master your HTML skills. We'll dive deep into these tags along the course, and you can also visit our <a href=\"/maclearn/coding/references/tags/a-tags.html\">refrences</a> for more info.</p><table><thead><tr><th>Tag name</th><th>Usage</th></tr></thead><tr><td>&lth1&gt - &lth6&gt</td><td>These are the six levels of heading tags. &lth1&gt is the largest level one heading, and &lth6&gt is the smallest heading.</td></tr><tr><td>&ltp&gt &lt/p&gt</td><td>These are the paragraph tags. Use them for paragraphs in the articles on your page.</td></tr><tr><td>&ltdiv&gt &lt/div&gt</td><td>They wrap up and seperate contents. With these tags, it's easier to control and organize different sections.</td></tr><tr><td>&lta&gt &lt/a&gt</td><td>They make elements inside them a clickable hyperlink that links to another webpage.</td></tr><tr><td>&ltstyle&gt &lt/style&gt</td><td>You can put CSS style sheets in these tags.</td></tr><tr><td>&ltb&gt &lt/b&gt</td><td>The text inside these tags is bold.</td></tr><tr><td>&ltscript&gt &lt/script&gt</td><td>These tags allow you to put JavaScript code inside an HTML file.</td></tr><tr><td>&ltul&gt &lt/ul&gt</td><td>These tags wrap up an unordered list.</td></tr><tr><td>&ltol&gt &lt/ol&gt</td><td>These tags wrap up a number-ordered list.</td></tr><tr><td>&ltli&gt &lt/li&gt</td><td>These tags wrap up a list item and are wrapped inside &ltul&gt &lt/ul&gt or &ltol&gt &lt/ol&gt tags.</td></tr><tr><td>&lthr&gt</td><td>A line that seperates sections, like the colored line <a href=\"#hr\" style=\"text-decoration: underline\">here</a>.</td></tr><tr><td><a href=\"/reference/tags/br-tag.html\" title=\"More information about this tag.\">&ltbr&gt</a></td><td>It breaks the paragraph to form a new line<br />like<br />this.</td></tr><tr><td><a href=\"/reference/tags/img-tag.html\" title=\"More information about this tag.\">&ltimg&gt</a></td><td>The browser can display an image by using this tag.</td></tr></table><p>You can certainly take some time to try and make an interesting webpage using the tags introduced above, but to completely understand and master their usage and the concepts, continue reading and learning along the course. These tags (and more) will all be introduced in depth later. You can also visit our references for more information. Have fun exploring HTML tags!</p>",
      "unit": "The Very Basics",
      "articleName": "More HTML Tags!",
      "articleDate": "2.19.2024",
      "articleRelease": "2.19.2023",
      "author": "Tony",
      "id": 2
    },
    {
      "paragraph": "<p>You can't code a webpage without basic structure. They contain all the information about your webpage. Today, we will explore the basic structure of a webpage.<br />Here is an example of the basic HTML structure:</p><code>&lt!DOCTYPE html&gt<br /><span style=\"color: transparent\" class=\"space\"></span>&lthtml&gt<br /><span style=\"color: transparent\" class=\"space\">pcp</span>&lthead&gt<br /><span style=\"color: transparent\" class=\"space\">pcpcpc</span>&lttitle&gtMy Webpage&lt/title&gt<br /><span style=\"color: transparent\" class=\"space\">pcp</span>&lt/head&gt<br /><span style=\"color: transparent\" class=\"space\">pcp</span>&ltbody&gt<br /><span style=\"color: transparent\" class=\"space\">pcpcpc</span>&lth1&gtHello World!&lt/h1&gt<br /><span style=\"color: transparent\" class=\"space\">pcp</span>&lt/body&gt<br /><span style=\"color: transparent\" class=\"space\"></span>&lt/html&gt<br /></code><ul><li>First, we typed the <a href=\"/reference/tags/doctype-tag.html\">&lt!DOCTYPE html&gt</a> tag. It defines, or tells, the browser what language this document is written in (HTML). Always type this tag first in an HTML file.</li><li>Then, we have &lthtml&gt tags. These tags wrap up all the information and contents in the HTML file.</li><li>Inside the &lthtml&gt tags, we have the &lthead&gt tags. These tags contain all the related information not displayed on the webpage.</li><li>We also have the &ltbody&gt tags. This is where all the visible elements on the webpage are located.</li><li>Finally, we have the &lttitle&gt tags inside the &lthead&gt tags. The text inside them is displayed on the browser page title like this:</li><br /></ul><img src=\"/media/coding10.png\" alt=\"Browser page title\" /><p>These 5 elements form the basic structure of a webpage. Always remember to put them in your HTML file. In <a href=\"install-vs-code.html\">VS Code</a>, open an HTML file then type \"!\" and hit enter. VS Code will auto complete these tags! Try typing in different tags to explore more about these tags.</p>",
      "unit": "HTML Foundation",
      "articleName": "HTML Basic Structure",
      "articleDate": "2.19.2024",
      "articleRelease": "3.1.2023",
      "author": "Tony",
      "id": 3
    },
    {
      "paragraph": "<p>Articles are everywhere. They contain headings, paragraphs, images, and more. They are the heart of a webpage, what the webpage is trying to tell the user. Today, we'll introduce you on all the tags needed for writing an article on your webpage. Here is an example of an article structure:</p>[LAB]<p>This is a basic structure of an article. We used <a href=\"/maclearn/coding/references/tags/article-tags.html\" title=\"More information about these tags\">&ltarticle&gt</a> tags first. They tell the browser that all the elements and contents inside these tags are an article.<br />Then, we typed the <a href=\"/maclearn/coding/references/tags/heading-tags.html\" title=\"More information about these tags\">&lth1&gt</a> heading tags called \"Lorem\".<br />Finally, we have <a href=\"/maclearn/coding/references/tags/heading-tags.html\" title=\"More information about these tags\">&ltp&gt</a> tags for paragraph and some <a href=\"/maclearn/coding/references/tags/heading-tags.html\" title=\"What's lorem ipsum?\">lorem ipsum</a>.<br />At the end, we added the &lt/article&gt closing tag to close the &ltarticle&gt section.</p><p>Today, we created different tags to organize an article. The &ltarticle&gt tags are the wrapper. They helped organize and separate contents so it's easier to read the code. &lth1&gt tags are very useful when writing long articles with headings and subheadings. &ltp&gt tags are also important for paragraphs. Have fun trying them!</p>",
      "unit": "HTML Foundation",
      "articleName": "HTML Article Structure",
      "articleDate": "2.18.2024",
      "articleRelease": "2.26.2023",
      "author": "Tony",
      "interactiveHTML": "<article>\n <h1>A Heading</h1>\n <p>A short paragraph.</p>\n</article>",
      "id": 4
    },
    {
      "paragraph": "<p>Attributes are additional information added to a tag. They provide more information about the tag's <b>class, id, title, style, function, and more depending on what the tag is.</b> A tag can have multiple attributes that have different usages.</p>[LAB]<span style=\"font-size: 17px\"><i>Note: There isn't a JavaScript function, so nothing happens when the button's clicked.</i></span><p>To give a tag an attribute, type the attribute's name first, then type the \"=\" sign, and type the value (information), of the attribute in between the \"\" symbols. Always put attributes in the opening tag and use spaces to separate different attributes.</p><ul><li>\"id\" attribute gives the tag a unique id that no other tags can have</li><li>\"class\" assigns the tag a class that other tags can also have</li><li>\"href\" tells the browser the destination of a link</li><li>\"style\" lets us style the tag with CSS syntax directly in HTML</li><li>\"src\" tells the browser the source of an element</li><li>\"alt\" is alternative text</li><li>\"width\" is the width of the element</li><li>\"title\" shows when user hovers over the element</li><li>\"onclick\" runs JavaScript functions when the element is clicked</li></ul><p>Attributes make HTML tags even more powerful. By selecting a tag's id or class attribute, you can style the tag or run JavaScript code with it! And that's not all, there are hundreds of attributes for different tags and different usages. Attribute is a really important and powerful part of HTML5. Check our references for more interesting attributes and learn more 😄!</p>",
      "unit": "HTML Foundation",
      "articleName": "HTML Attributes",
      "articleDate": "2.18.2024",
      "articleRelease": "3.9.2023",
      "author": "Tony",
      "interactiveHTML": "<a id=\"link\" href=\"https://google.com\" style=\"color:red;\">Link</a>\n<img src=\"/media/img.jpg\" alt=\"image\" width=\"100px\" class=\"image\">\n<button title=\"Click me\" onclick=\"animation()\">Click</button>",
      "id": 5
    },
    {
      "paragraph": "<p><b>Images help a lot on visualizing and understanding different concepts, information, and other things.</b> They also make your webpage richer with content and information. This article will show you how to put images on your webpage.</p><img src=\"/media/coding11.png\" alt=\"An image\" style=\"width: 40%; margin-inline: 30%\" /><p>This is an image tag's HTML code:</p>[LAB]<p>The src attribute of the &ltimg&gt tag tells the browser the image source so it can display it properly, and alt attribute tells the browser what the alternative text of the image is for accessibility or if the image doesn't show. These are two most important attributes for &ltimg&gt tag. For more information, visit our <a href=\"/maclearn/coding/references/tags/img-tag.html\">references</a>.</p>",
      "unit": "Common Tags",
      "articleName": "HTML Image",
      "articleDate": "2.18.2024",
      "articleRelease": "3.3.2023",
      "author": "Tony",
      "interactiveHTML": "<img src=\"/media/img.jpg\" alt=\"Image\">",
      "id": 6
    },
    {
      "paragraph": "<p>Hyperlink is one of the most important elements on a webpage. Users access different websites around the world using hyperlinks. This article will tell you how to add a link to your website.</p><img src=\"/media/a1.png\" alt=\"A link\" /><p>Here is the HTML code responsible for a link:</p>[LAB]<p>We typed the &lta&gt anchor tags and used the \"href\" attribute to make the text inside a clickable link. It tells browser where to go when user clicks on the link.<br />These are what you can type in the href attribute:</p><ul><li>Any available website link. (Like the example above)</li><li>Files in the document's folder, inner folder, or outer folder.</li><li>Any elements on that page.</li></ul><p>To learn more, you can try it yourself, watch video tutorials, or visit our <a href=\"/maclearn/coding/references/tags/a-tags.html\">references</a>.</p>",
      "unit": "Common Tags",
      "articleName": "HTML Hyperlink",
      "articleDate": "2.18.2024",
      "articleRelease": "3.3.2023",
      "author": "Tony",
      "interactiveHTML": "<a href=\"https://google.com\">Google</a>",
      "id": 7
    },
    {
      "paragraph": "<p>Lists are very common and important when showing steps, listing tips, and more. This article will tell you how to create lists in HTML.</p><h2>1. Unordered List</h2><p>Here is some HTML code of an unordered list example:</p>[LAB]<p>We created a heading and typed the &ltul&gt tags. These tags tell the browser the elements wrapped inside them are parts of an <b>unordered list</b> (bulleted). To define the list items, we typed 3 &ltli&gt&lt/li&gt pairs, with the item text inside them.<br />This is the output of the code:</p><h2>2. Ordered List</h2><p>Here is some code of an ordered list example:</p>[LAB]<p>The code above is the same as the unordered list example, except we changed the &ltul&gt tags to the &ltol&gt tags so the browser knows that you want to create an <b>ordered list</b> (numbered).</p><p>Always remember to put &ltli&gt&lt/li&gt tags inside &ltol&gt&lt/ol&gt tags or it won't work! These tags are very helpful when listing steps to do something on your webpage. You can style it, give it a title, assign it an id or a class, or do whatever you want with it. Have fun exploring &ltol&gt&lt/ol&gt tags!</p><h2>Bonus: Changing the Label Before a List Item</h2><p>Maybe you want a square before an &ltul&gt list item instead of a circle, or you want alphabet-ordered items instead of number-ordered items in &ltol&gt tags. You can do this by styling the &ltul&gt or &ltol&gt tags.<br />Here is how you do it in HTML:</p>[LAB]<p>The structure is still the same, but we added a style attribute on the &ltul&gt tag in order to style the labels of the list items. Type \"list-style-type\" so you can choose any label available in HTML5. We used square, but there are none, circle, decimal (number), alpha (alphabet), and many more choices you can explore. Styling ordered list is exactly the same with styling unordered list.</p><h2>Summary</h2><p>List tags are very important and useful. They are &ltul&gt tags which means unordered list; &ltol&gt tags which means ordered list; and &ltli&gt tags which wrap up list items and can be put inside both &ltul&gt tags or &ltol&gt tags. To style the label of a list item, use styling method and type \"list-style-type\" to choose any available labels.</p>",
      "unit": "Common Tags",
      "articleName": "HTML List",
      "articleDate": "2.19.2024",
      "articleRelease": "3.4.2023",
      "author": "Tony",
      "interactives": [
        "<h1>My Shopping List</h1>\n<ul>\n <li>Food</li>\n <li>Toys</li>\n <li>Shirts</li>\n</ul>",
        "<h1>How To Learn Coding</h1>\n<ol>\n <li>Go to MacLearn.</li>\n <li>Take some time to learn and practice.</li>\n <li>Practice some more.</li>\n <li>And you're done!</li>\n</ol>",
        "<h1>Styling ul Tags</h1>\n<ul style=\"list-style-type: square;\">\n <li>An item.</li>\n <li>Another item.</li>\n <li>The last item.</li>\n</ul>"
      ],
      "id": 8
    },
    {
      "paragraph": "<p>We often make text <mark>highlighted</mark>, <b>bolded</b>, <u>underline</u>, or <i>italic</i> to emphasize important text. This article will tell you how to format text in HTML.</p><p>Some formatting tags example:</p>[LAB]<p>So it's pretty clear what tag is for. Every formatting tag has a closing tag and the text inside them is formatted. You can also put a pair of formatting tags inside another pair of formatting tags so a text can be like <sup><u><b><mark>this</mark></b></u></sup> or <sub><ins><del><i>th<sup>is</sup></i></del></ins></sub>.</p><p>You may already noticed some formatting tags have the same output like &ltb&gt and &ltstrong&gt tags or &lti&gt and &ltem&gt tags. Yes, they are exactly same. You can open VS Code and explore all these formatting tags yourself. If you want to make the formatting output different, you can also use CSS to style the output.</p><h2>Bonus: HTML Comment</h2><p>Having comments in your code can have many purposes, like noting what a section of code is for, jot down ideas, explain code, or temperoraily making content invisible. To do this in HTML, simply follow the example below:</p>[LAB]<p>To add a comment in HTML, just type a less than symbol (&lt), followed by an exclamation mark (!) with two hyphens (--) behind it. To close the comment, type two hyphens (--) and put a greater than tag (&gt) to close it. Comments are not visible in the HTML output, but is visible in the code.</p>",
      "unit": "Common Tags",
      "articleName": "HTML Formatting",
      "articleDate": "2.18.2024",
      "articleRelease": "3.4.2023",
      "author": "Tony",
      "interactives": [
        "<p>\n  <b>I'm bolded</b>\n  <br>\n  <strong>I'm strong</strong>\n  <br>\n  <u>I'm underlined</u>\n  <br>\n  <ins>I'm inserted</ins>\n  <br>\n  <mark>I'm highlighted</mark>\n  <br>\n  <i>I'm italic</i>\n  <br>\n  <em>I'm emphasized</em>\n  <br>\n  <del>I'm deleted</del>\n  <br>\n  Some text <sup>I'm superscript</sup>\n  <br>\n  Some text <sub>I'm subscript</sub>\n  <br>\n</p>",
        "<!-- Your comment goes here -->\n<!-- This is a comment -->\n<!-- Comments aren't displayed -->"
      ],
      "id": 9
    },
    {
      "paragraph": "<p>Tables do not only present mathematical relationships. They summarize data, information, and lists. It's a way to visualize things and help us better understand the main idea and data. It's also really common to create tables in webpages. This article will guide you through how to do this😃</p>[LAB]<span style=\"font-size: 17px\">Note: We added <i>border: 1px solid black;</i> to th and td so the table has borders. Add <i>border-collapse: collapse;</i> to the table tag to make the borders collapse.</span><img style=\"width: 80%; margin-top: 20px; margin-inline: 10%\" src=\"/media/coding13.png\" alt=\"table structure image\"/><p>The &lttable&gt tags wrap up three sections of the table: &ltthead&gt, &lttbody&gt, and &lttfoot&gt. No matter what the section is, a row is always created by the &lttr&gt tags. The &ltthead&gt is the table header row and each data cell in this row is created by the &ltth&gt tags. &lttbody&gt contains the actual data of the table, and &lttfoot&gt contains summary information. Each data cell in both &lttbody&gt and &lttfoot&gt sections is enclosed by the &lttd&gt tags.</p><p>So the above information is the necessary steps of creating HTML tables. Yeah, it's a bit confusing, but practice makes perfect. As long as you follow and modify the above example, you'll get a grasp of how HTML table works, and with some more practice, you'll master this skill. For additional guide and styling tips on tables, visit our <a href=\"/maclearn/coding/references/tags/creating-tables.html\">reference</a>.</p>",
      "unit": "HTML Visuals",
      "articleName": "HTML Tables",
      "articleDate": "2.19.2024",
      "articleRelease": "5.22.2023",
      "author": "Tony",
      "interactiveHTML": "<table>\n <thead>\n  <tr>\n   <th>Name</th>\n   <th>Score</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>Tony</td>\n   <td>95</td>\n  </tr>\n  <tr>\n   <td>Kyle</td>\n   <td>85</td>\n  </tr>\n </tbody>\n <tfoot>\n  <tr>\n   <td>Average</td>\n   <td>90</td>\n  </tr>\n </tfoot>\n</table>\n<style>\nth, td {\n  border: 1px solid black;\n}\ntable {\n  border-collapse: collapse;\n}\n</style>",
      "id": 10
    },
    {
      "paragraph": "<p>Without multimedia, a webpage would just be a bunch of boring text. Multimedia includes images📊, videos📸, audio🔊, and music🎵. These elements are dynamic and they make a webpage more interesting and easy to visualize and understand.</p>[LAB]<span style=\"font-size: 17px\"><i>Note: Video downloaded <a href=\"https://www.videezy.com/technology/5654-4k-stock-video-of-typing-on-laptop\" target=\"_blank\">here</a>, no copyright. Audio downloaded from <a href=\"https://ncs.io/energy\" target=\"_blank\">NCS</a>, Elektronomia - Energy.</i></span><p>In the &ltvideo&gt tags, we added the &ltsource&gt tags with the src attribute to link and display the video. Two &ltsource&gt tags are used because the browser may not recognize the first file type (the type attribute), but it can display the next recognized source. If none is recognized, the browser displays the text within the &ltvideo&gt tags. The &ltvideo&gt tags have the controls attribute so users can actually control the video. &ltaudio&gt tags are the same, but the width attribute cannot be used for styling. We already learned about &ltimg&gt tag <a href=\"html-img.html\">here</a>. Output of the example:</p><p>So that's all about HTML multimedia. Always remember to put source tags with the src attribute that links to the source so the browser knows which file you're trying to display. Multimedia is always fun to play and explore with, so have fun!</p>",
      "unit": "HTML Visuals",
      "articleName": "HTML Multimedia",
      "articleDate": "2.18.2024",
      "articleRelease": "5.26.2023",
      "author": "Tony",
      "interactiveHTML": "<video width=\"220px\" controls>\n <source src=\"/media/video.mp4\" type=\"video/mp4\">\n Your browser does not support this media format.\n</video>\n<audio controls>\n <source src=\"/media/audio.mp3\" type=\"audio/mp3\">\n Your browser does not support this media format.\n</audio>\n<img src=\"/media/image.png\" width=\"150px\" alt=\"An image\">",
      "id": 11
    },
    {
      "paragraph": "<p>HTML embedding is very useful when you want to embed, or have, other websites' contents or pages to be on your own web page. For example: a YouTube video, a Google Forms, a Wikipedia article, or even other pages in your own website.</p>[LAB]<p>In this example, we used the &ltiframe&gt tags to embed MacWeb to our web page. There are three attributes: src, width, and height.</p><ul><li><b>Iframe</b>: Think of it as an actual frame that can display almost any webpage on your page. (Some webpages may not be able to display because of security concerns and cross-platform policies)</li><li><b>Src</b>: the src attribute tells the browser which webpage the iframe is displaying. Put the URL of the webpage that you want to display here.</li><li><b>Width & Height</b>: the width and height attributes tell the browser how big the iframe should be.</li><br /></ul><p>In conclusion, if you want to put another webpage on your own webpage, use the &ltiframe&gt tags with the URL of the site in the src attribute.</p>",
      "unit": "HTML Visuals",
      "articleName": "HTML Embed",
      "articleDate": "2.18.2024",
      "articleRelease": "1.24.2024",
      "author": "Tony",
      "interactiveHTML": "<iframe src=\"https://mac-web.github.io\" width=\"800px\" height=\"500px\"></iframe>",
      "id": 12
    },
    {
      "paragraph": "<p>For a website to be interesting, you not only need to have text and images, you also need graphics and icons. While using images is a way to add icons to your site, HTML SVG (Scalable Vector Graphics) is a better option. It's very flexible, meaning it maintains its resolution when scaling and it's responsive, and it also has many other benefits like animations, small file size, and customization.</p>[LAB]<span style=\"font-size: 17px\"><i>Note: There isn't a file called \"icon.svg\" as in the example, so it shows the alternative text.</i></span><br /><p>In the above example, we introduced 4 new tags: &ltsvg&gt, &ltrect&gt, &ltcircle&gt, and &lttext&gt, along with an &ltimg&gt tag, and several new attributes.</p><ul><li><b>SVG</b>: The &ltsvg&gt tag acts like a container, telling the browser all the code inside these tags is part of the SVG image's code.</li><li><b>Rect</b>: The &ltrect&gt tag, wrapped inside the &ltsvg&gt tags, tells the browser that there's a rectangle in the SVG, with a height and a width of 200 pixels, is filled with the color blue, and has a roundness of 20 pixels, as specified in the attributes.</li><li><b>Circle</b>: Same with the &ltrect&gt tag, &ltcircle&gt tag tells the browser there's a yellow-filled circle with a radius of 80 pixels (r attribute), and the center of that circle is placed 100 pixels right (cx attribute) and 100 pixels down (cy attribute) to the top left corner of the SVG.</li><li><b>Text</b>: A straightforward tag, meaning the text within a SVG image. Fill atrribute defines the text color, font-size defines the font size, and the x and y attributes tell the browser that the text is placed 55 pixels right and 115 pixels down to the top left corner of the SVG.</li><li><b>Img</b>: This is another way to put SVG on a web page. You can put all the SVG codes into one SVG file (.svg), and then use the &ltimg&gt tag with the src attribute to display that SVG as in the example above.</li></ul><p>Note that this is just a very little portion of SVG introduced. Except for &ltrect&gt, &ltcircle&gt, and &lttext&gt, there are still tons of other tags and attributes that can be used in SVG and are more complex. To summarize, there are two ways to put SVG into your web page. One, by putting SVG code directly in your HTML document with different tags, or two, by using an &ltimg&gt tag to display an external SVG file. If you already have an SVG downloaded, use the &ltimg&gt tag, otherwise, use inline SVG, as you can have better flexibility and control over the codes.</p>",
      "unit": "HTML Visuals",
      "articleName": "HTML SVG",
      "articleDate": "2.19.2024",
      "articleRelease": "1.29.2024",
      "author": "Tony",
      "interactiveHTML": "<img src=\"icon.svg\" alt=\"Icon\">\n<svg height=\"200px\" width=\"200px\">\n <rect height=\"200px\" width=\"200px\" fill=\"blue\" rx=\"20\" />\n <circle r=\"80\" cx=\"100\" cy=\"100\" fill=\"yellow\" />\n <text fill=\"black\" font-size=\"45\" x=\"55\" y=\"115\">SVG</text>\n</svg>",
      "id": 13
    },
    {
      "paragraph": "<p>Having a clear and readable structure of HTML code can make it easier for both you and other developers to read your code. Semantic tags are HTML elements that describe the meaning of the content they contain. They don't actually modify the content, but they separate contents so it's easier to read, understand, and control different sections. This is an example:</p>[LAB]<p>You may already noticed how some tags' names have English meanings like \"header\", \"section\", or \"footer\". These tags are semantic elements. We separate content by these tags in the example above. &ltheader&gt tags are for a page's heading, &ltnav&gt tags for the navigation bar, &ltarticle&gt for the main article, &ltsection&gt for a section in the article, and &ltfooter&gt for footer which has additional information about the website. Here is the output:</p><p>&ltfigure&gt and &ltfigcaption&gt are also semantic tags. They often appear together. The &ltfigure&gt tag is used to contain a graph, diagram, or photo. The &ltfigcaption&gt tag is used to further explain the figure. The &ltaside&gt tag is used for sidebars, such as ads, navigation, or recommended articles that usually appear on the sides of a page (like the one on the left). HTML semantic tags come in handy when you have a lot of information on one page and it needs to be organized into different parts.</p>",
      "unit": "Efficient Code",
      "articleName": "HTML Semantics",
      "articleDate": "2.19.2024",
      "articleRelease": "4.25.2023",
      "author": "Tony",
      "interactiveHTML": "<header>\n <h1>Heading</h1>\n <p>Author: John Doe</p>\n</header>\n<nav>\n <li>Home</li>\n <li>About</li>\n</nav>\n<article>\n <section>\n  <h2>Section 1</h2>\n  <p>Lorem ipsum dolor sit.</p>\n </section>\n <section>\n  <h2>Section 2</h2>\n  <p>Rane distinctio corrupti.</p>\n </section>\n</article>\n<footer>\n <p>By John Doe 2024</p>\n</footer>",
      "id": 14
    },
    {
      "paragraph": "<p>Let's say you're starting a code tutorial website like this one, and you want to write this line of code within your page: &lth1&gtHello World!&lt/h1&gt but whatever you try, you just can't type &lt &gt symbols normally. Does that mean you can't do that in HTML? This is what HTML special characters is about. Here is an example:</p>[LAB]<p>HTML special characters are typed using \"entities\" – codes that start with an ampersand (&) and end with a semicolon (;). Numbered entities use a symbol list with over 50,000 symbols. Put a hashtag (#) and the symbol's number code after the ampersand (&) when using numbered entities.</p><code>&#38;#999; is &#999;</code><p>HTML5 also has named entities using letters after &#38; instead of a hashtag and a number that represent letters, punctuation, math, and currency symbols. However, named entities are more limited than numbered entities.</p><code>&#38;excl; is &excl;</code><p>We type special characters in HTML by using codes called numbered intities and named entities. Numbered entities follow the format&#38;#number-that-represents-the-symbol; and named entities follow the format &#38;letters-that-represent-the-symbol;. HTML special characters are very useful, so remember the important symbols' codes!</p><table><thead><tr><th>Symbol</th><th>Numbered entities</th><th>Named entities</th></tr></thead><tr><td></td><td>&#38;#160;</td><td>&#38;nbsp;</td></tr><tr><td>&lt</td><td>&#38;#60;</td><td>&#38;lt;</td></tr><tr><td>&gt</td><td>&#38;#62;</td><td>&#38;gt;</td></tr><tr><td>&</td><td>&#38;#38;</td><td>&#38;amp;</td></tr><tr><td>&#35;</td><td>&#38;#35;</td><td>&#38;num;</td></tr><tr><td>\"</td><td>&#38;#34;</td><td>&#38;quot;</td></tr><tr><td>'</td><td>&#38;#39;</td><td>&#38;apos;</td></tr><tr><td>&#162;</td><td>&#38;#162;</td><td>&#38;cent;</td></tr><tr><td>&#169;</td><td>&#38;#169;</td><td>&#38;copy;</td></tr></table><br /><span style=\"font-size: 17px\"><i>Note: the symbol varies depending on the font style.</i></span><br />",
      "unit": "Efficient Code",
      "articleName": "HTML Special Characters",
      "articleDate": "2.19.2024",
      "articleRelease": "5.3.2023",
      "author": "Tony",
      "interactiveHTML": "<h2>Symbols Entities</h2>\n<ul>\n <li>Less than: &lt;</li>\n <li>Greater than: &gt;</li>\n <li>Numbered entity: &#89;</li>\n <li>Named entity: &target;</li>\n <li>Double quote: &#34;</li>\n <li>Single quote: &#39;</li>\n <li>Semicolon : &#59;</li>\n <li>Copyright : &copy;</li>\n <li>A random symbol : &#3348;</li>\n <li>The first numbered entity: &#33;</li>\n <li>The last: &#55203;</li>\n</ul>",
      "id": 15
    },
    {
      "paragraph": "<p>HTML form is a powerful tool for creating interactive elements on a webpage, such as input fields, options, and buttons. For example, you could use a form to allow users to register for an account by entering their name and email address in two separate input fields, and then submitting the form by clicking a submit button. Here is an example code of an HTML form:</p>[LAB]<p>The &ltform&gt tag is used to wrap up the contents of a form. The \"action\" attribute specifies what document or webpage the browser should load when the form is submitted. If left empty, the original page will reload. To create input fields that users can type into, the &ltinput&gt tag is used. The \"type\" attribute defines the type of input field, such as number, text, password, or radio, which is a small circle that users can select.</p>Text input<br /><input type=\"text\" /><br />Password input<br /><input type=\"password\" /><br />Radio input<br /><input type=\"radio\" /><p>The &ltlabel&gt tags are used to wrap up the label text, such as \"Choice 1\" above. When creating a form with multiple choices, label tags are user-friendly because the \"for\" attribute allows users to directly select a radio option by clicking on the label, rather than having to click the small circle of a radio input.</p><form><input type=\"radio\" id=\"radio\" name=\"option\" /><label for=\"radio\">Don't need to click the circle because \"for\" attribute of label tags</label><br /><input type=\"radio\" id=\"radio\" name=\"option\" /> Need to click the circle because there is no label</form><p>Finally, we have the &ltbutton&gt tag, which creates a clickable button for users. The \"type\" attribute of a button defines the type of a button. In the example shown earlier, we used a \"submit\" type button. This type of button is handy because users can simply hit \"enter\" and the form will be submitted to a web server or another document, without them actually clicking on the button.</p>Type something and hit enter to reload this page<br /><form action=\"\"><input type=\"text\" /><br /><button type=\"submit\">Reload</button></form><p>At the bottom we have &ltscript&gt tags. These tags are not related to forms; instead, they link the HTML page to a JavaScript code file so JavaScript can do something with the data entered in the form.</p><p>So that's basically all about HTML forms. To learn more, you can check out our references for tags and attributes. Have fun exploring HTML forms!</p><h2>Bonus: HTML Selection</h2><p>While inputs and buttons can be very useful and convenient, but too many of them may annoy people or take up a lot of space on your webpage. But no worries, you can use HTML selection to create dropdown menus to save space and make it more convenient for users. Here's an example:</p>[LAB]<p>In this example, we used three HTML form tags: &ltlabel&gt, &ltselect&gt, and &ltoption&gt.</p><ul><li><b>Label</b>: Label tells the user what the dropdown menu of this HTML selection is for.</li><li><b>Select</b>: The select tags create a dropdown menu that the user can click on to open up a menu of option they can choose.</li><li><b>Option</b>: The option tags create an actual option in the dropdown menu. Put multiple option tags inside the select tags to create a functional dropdown menu. The value attribute tells the browser what the corresponding value of that option is.</li></ul><p>With the help of the &ltselect&gt tags, we created a dropdown menu and merged 8 different options into one little button, saving a lot of space, making the page comfortable, while maintaining the functionaily. You can also use selection to create forms or quizzes with many options. Try it out yourself to learn more!</p>",
      "unit": "Handling Users",
      "articleName": "HTML Forms",
      "articleDate": "2.18.2024",
      "articleRelease": "4.8.2023",
      "author": "Tony",
      "interactives": [
        "<form action=\"\">\n <input type=\"radio\" id=\"input\">\n <label for=\"input\">Choice 1</label>\n <br>\n <button type=\"submit\">Submit</button>\n</form>\n<script src=\"script.js\"></script>",
        "<label for=\"color\">What's your favorite color:</label>\n<select name=\"colors\" id=\"colors\">\n <option value=\"red\">Red</option>\n <option value=\"orange\">Orange</option>\n <option value=\"yellow\">Yellow</option>\n <option value=\"green\">Green</option>\n <option value=\"blue\">Blue</option>\n <option value=\"purple\">Purple</option>\n <option value=\"black\">Black</option>\n <option value=\"white\">White</option>\n</select>"
      ],
      "id": 16
    },
    {
      "paragraph": "<p>How are users supposed to get to your website if they can't even find it? Meta tags provide additional information, or metadata, to the browser, search engine, and other machines. They make your website show up on the search engine, they also show additional information, description, and image for the website in social media posts, messages, and more.</p>[LAB]<p>There are 5 different meta tags in the above example. The first one, charset meta tag, tells the browser this webpage's character set is UTF-8, so the browser can display the unicode characters correctly. The second one, description meta tag, has the description as the name attribute and the actual description of the page within the content attribute. The same rule applies to the author and the keywords metatags. Last but not least, the viewport meta tag tells the browser how to display the web page on different sizes of screens, so the page is always optimized and doesn't look bad no matter what the device is. The code example doesn't have an output because all meta tags are located in the head tags, where information isn't visible.</p><p>In conclusion, meta tags provide the browser more information about the page so users can browse it better. They also provide search engine bots a short description about the page to help them index it, so your page can actually show up when using a search engine to search your site. Other than that, there are still more uses of meta tags on a web page, so remember to check out our references or other resources for more info!</p>",
      "unit": "Handling Users",
      "articleName": "HTML Meta Tag",
      "articleDate": "2.19.2024",
      "articleRelease": "11.29.2023",
      "author": "Tony",
      "interactiveHTML": "<meta charset=\"UTP-8\">\n<meta name=\"description\" content=\"Free coding tutorials!\">\n<meta name=\"author\" content=\"MacWeb\">\n<meta name=\"keywords\" content=\"Coding, Web Developement, MacWeb\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
      "id": 17
    }
  ],
  "css": [
    {
      "paragraph": "<p>Congratulations! You've made it to the MacLearn CSS Course! You've learned a lot from the HTML course and you're getting closer and closer to being an expert in web development! With HTML, you can build your website's content, and now, with CSS's help, you can make your website look more visually appealing!</p><p>So what's CSS, actually? CSS, or Cascading Style Sheet, is a markup language used in web development along side HTML, and it's responsible for the styling and the layout of a website, such as the colors, the positioning of the elements, the font size, even gradients and animations, and so, so much more. Basically, CSS turns your website from plain text and content into a visually appealing interface by defining the layouts and the designs of the elements.</p><img src=\"/media/css/selector.png\" style=\"border-radius: 10px; width: 40%; margin-inline: 30%\" /><p>Here's an image explaining CSS's syntax, or the \"grammar\" for coding languages. Let's say you want to apply some CSS code to a &lt;h1&gt; element to make it red.</p><ol><li>First, you need to select that &lt;h1&gt; with CSS, otherwise it won't know which element you want to style. This is done by directly typing out the element without the &lt; or the &gt;. This is the \"selector\".</li><code class=\"code\">h1</code><li>Then, leave a space and type two curly brackets {} after the selector. The brackets will contain all the CSS code for the &lt;h1&gt; element.</li><code class=\"code\">h1 {}</code><li>To change the color, you need to use the CSS property \"color\". After the property, add a colon, and then the value \"red\". This tells CSS to make the &lt;h1&gt; text red.</li><code class=\"code\">color: red</code><li>Finally, close off the rule, or property-value pair, with a semi colon (;) and make sure the rule is inside the curly brackets.</li><code class=\"code\"><pre>h1 {color: red;}</pre></code></ol><p>Good job, you just learned your first line of CSS and the basic syntax for it! See the below example for the output of the code.</p>[LAB]<p>Here are some very important CSS concepts to keep in mind:</p><ul><li>Selector: Tells CSS which HTML element to style (h1 in this case).</li><li>Property: What you want to change, or style, about the element (color).</li><li>Value: What you want to change the property to (red).</li></ul><p>The above example is just a sneak peek of what CSS can do. Feel free to play around with it to see what happens, and click on the Next button to move on and start learning more CSS rules and master the power of CSS!</p>",
      "unit": "Meeting CSS",
      "articleName": "CSS Intro",
      "articleDate": "6.7.2024",
      "articleRelease": "6.7.2024",
      "author": "Tony",
      "interactiveHTML": "<h1>A Heading</h1>",
      "interactiveCSS": "h1 {\n  color: red;\n}",
      "id": 0
    },
    {
      "paragraph": "<p>Ok, so you've learned about some basic syntax and rules for CSS, but how do you add it to your HTML and actually style your page? There's three ways: external, internal, and inline.</p><ul><li>External: links your HTML file to a dedicated CSS file for styling.</li><li>Internal: putting all your CSS in a pair of &lt;style&gt; tags.</li><li>Inline: styling an element by adding a style attribute to it.</li></ul><p>These three ways all style your page and they all use the same syntax, but have different advantages and disadvantages. External CSS is really useful (most popular) when you have a lot of CSS for a lot of elements on your page. You can also use it across multiple HTML pages. Internal CSS is suited for styling a few elements on your page if it isn't very complex. Inline CSS is a fast and easy way to apply style to indivisual elements.</p><code class=\"code\">&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;</code><p>For external styling, add the &lt;link&gt; tag above to the &lt;head&gt; section of your HTML. The rel attribute defines the relationship between the linked file and the current HTML page, and in this case, it's a CSS stylsheet. The href attribute tells the browser where to find the stylesheet to actually link the CSS file with the HTML page.</p><code class=\"code\">&lt;style&gt; &lt;/style&gt;</code><p>For internal styling, add the &lt;style&gt; tags in either the head or the body section of your HTML. Then add your CSS code inside to style the page.</p><code class=\"code\">&lt;h1 style=\"color: red; font-size: 20px;\"&gt;Heading&lt;/h1&gt;</code><p>Last but not least, we have inline styling. The CSS in the style attribute only applies to one element, so there's no need for a selector or curly brackets. Simply add a style attribute to the element you want to apply inline styling, then type in the CSS code. Note that this has a higher priority and overrides existing external/internal CSS.</p><p>In conclusion, there are 3 ways to add CSS to your HTML. External styling is useful for a large amount of CSS, internal is handy for quick styling, and inline is good for styling elements seperately. Use them to their advantages, and also combine them together to style your website to achieve the design you want.</p>",
      "unit": "Meeting CSS",
      "articleName": "Adding CSS",
      "articleDate": "6.7.2024",
      "articleRelease": "6.7.2024",
      "author": "Tony",
      "id": 1
    },
    {
      "paragraph": "<p>According to research, colors affect your mood a lot. It's also really important to add colors to your website to make it more interesting, and for it to have a character and improve the element visibility. Today, we'll learn how to add colors to text on your website using CSS. Below are some of the ways that you can add CSS colors.</p><code class=\"code\">color: red;<br />color: #0000FF;<br />color: rgb(0, 255, 0);<br />color: rgba(200,100,50,0.5);</code><p>In the above code examples, we listed four different ways to add colors to text using CSS. To add a color to an element, type the color property in your element's CSS. For the value of the rule, there are a couple options. The named colors are the easiest to add, simply just type the name of the color, but it may be limited. Hex code covers all the colors, but is a complicated string with numbers and letters, with a hashtag in front. Then there's rgb, which stands for red, green, and blue, like this: rgb(0, 255, 0). The numbers inside the parentheses represent how much of each color is used in the mix. So in this example, there's no red (0), a max amount of green (255), and no blue (0). Rgba works exactly the same as rgb, except there's an added value at the end, called \"alpha\", which determines the color's opacity, or transparency.</p>[LAB]<p>In conclusion, the CSS property of \"color\" adds a specific color to an element's text, and you can set the value of the color with named, hex, rgb, or rgba values.</p><p>Play around and experiment with the different values above to explore more about CSS colors, and you'll learn how they work and how to use them properly! Move on to learn more about adding a background color to your page and the elements to make your website more interesting. Onward!</p>",
      "unit": "Colors & Borders",
      "articleName": "CSS Colors",
      "articleDate": "6.9.2024",
      "articleRelease": "6.7.2024",
      "author": "Tony",
      "interactiveHTML": "<h1>A Heading</h1>\n<h2>Another Heading</h2>\n<h3>Yet Another Heading</h3>\n<h4>Wow, Heading Again</h4>",
      "interactiveCSS": "h1 {\n  color: red;\n}\nh2 {\n  color: #0000FF;\n}\nh3 {\n  color: rgb(0, 255, 0);\n}\nh4 {\n  color: rgba(200,100,50,0.5);\n}",
      "id": 2
    },
    {
      "paragraph": "<p>Adding colors to text and paragraphs is one thing, but adding background colors to your website is even more common and useful. Even this article that you're reading has a gray background color, and the sidebar on the left has a darker shade of it. See, background colors are everywhere! Today, you'll learn how to add all kinds of backgrounds (not just colors) to your elements!</p><h2>Background color</h2><code class=\"code\">background-color: blue;</code><p>To add a background color to an element, use the \"background-color\" CSS property. Same as the \"color\" CSS property, you can set the value to a named color, a hex code, an rgb value, or an rgba value. Note that setting a background color will only give the element a background color, not the entire page.</p><h2>Background image</h2><code class=\"code\">background-image: url(\"image.png\");</code><p>To make an element's background an image, use the \"background-image\" CSS property. For the value part, you need to use the \"url\" value function. Don't be scared of the name, because it's basically just a CSS program telling the browser where to find that background image. To use the \"url\" value function, just type \"url\", followed by a pair of parentheses, with the image path wrapped in there enclosed by double quotes, like in the example above.</p><h2>Background gradient</h2><code class=\"code\"> background: linear-gradient(to right, red, blue); </code><p>Now we're getting real fancy with the background gradient. Gradient is basically the process of transforming a color to another one. To add it, use the \"background\" property (not \"background-color\"!), followed by another CSS function, \"linear-gradient\". There are three different values in this function: to right, red, and blue. The \"to right\" value is saying which direction the gradient is going. Red is the starting color, and blue is the ending one, meaning in this gradient, red is turning to blue going to the right. There can also be more than two colors, forming a more complex gradient.</p>[LAB]<h2>Bonus: setting background image position</h2><p>As you can see in the example above, the background image of the mountain is repeating and isn't centered properly. To fix this issue, you need to use two other CSS background properties: \"background-size\" and \"background-position\".</p><code class=\"code\">background-size: cover;<br />background-position: center center;</code><p>What \"background-size: cover\" does is that it enlarges the background image to scale until it fills the entire element, which gets rid of the repeating problem. But now the background image is enlarged, it's stretched and off centered, so we used the \"background-position: center center\" rule to set the image to the center. There are two centers because the first one sets the horizontal centering of the image, and the second one sets the vertical centering. Paste this code to the example above and see the CSS magic for yourself! You can also mess around with the values to learn about them and test them out!</p>",
      "unit": "Colors & Borders",
      "articleName": "CSS Background",
      "articleDate": "6.10.2024",
      "articleRelease": "6.7.2024",
      "author": "Tony",
      "interactiveHTML": "<h1>I have background color.</h1>\n<h2>I have background image.</h2>\n<h3>I have background gradient.</h3>",
      "interactiveCSS": "h1 {\n  background-color: blue;\n}\nh2 {\n  background-image: url(\"/media/css/image.png\");\n}\nh3 {\n  background: linear-gradient(to right, red, blue);\n}",
      "id": 3
    },
    {
      "paragraph": "<p>Now that you know about colors and backgrounds in CSS, you can style your website even more by adding borders to your elements. Borders can highlight elements, seperate content, and improve your page's readability. Let's learn how to add it:</p><code class=\"code\">border: 5px solid orange;</code><p>To add a border to an element, use the CSS property of \"border\". There are three different values in the rule: 5px, solid, and orange. The first one, 5px, sets the width of the border. The second one, solid, defines the border stlye. It can also be dotted, dashed, and a lot more. The third one, orange, you guessed it, sets the color of the border to orange. You can change the order of the values if you want, but this is the recommended way of adding borders in CSS.</p>[LAB]<h2>Bonus: rounded corners</h2><p>In modern web design and many modern websites, rounded elements are very important and common, and can make your page more visually appealing and smooth overall. To add it, you need to use another CSS border property:</p><code class=\"code\">border-radius: 15px;</code><p>The \"border-radius\" sets how much an element's corners are rounded. In this case, the radius of the rounded corner is 15px. To make it more rounded, simply increase the number. Note that you can round the corners of an element without giving it a border. To make each corner have a different radius, do this:</p><code class=\"code\">border-radius: 10px 30px 5px 20px;</code><p>In this case, we put four values in the rule. The first value (10px) is for the top-left corner, second value (30px) for the top-right, third value (5px) for the bottom-right, and the fouth (20px) for the bottom-left. Feel free to paste this code or the above code to the example above, and see how the element's corners are rounded! You can also change the values and see what you can create with CSS borders and rounding!</p>",
      "unit": "Colors & Borders",
      "articleName": "CSS Borders",
      "articleDate": "6.10.2024",
      "articleRelease": "6.7.2024",
      "author": "Tony",
      "interactiveHTML": "<h1>I have an orange border.</h1>",
      "interactiveCSS": "h1 {\n  background-color: lightblue;\n  border: 5px solid orange;\n}",
      "id": 4
    },
    {
      "paragraph": "<p>One of the most important aspects of web design and CSS is the sizing of the elements. The width, height, and white space helps a lot when creating websites that look simple and good and have great readability. Today, we'll learn how to change the width and height of an element using CSS.</p><code class=\"code\">width: 100px;<br />height: 100px;</code><p>First up, we have the \"width\" CSS property that tells the browser how wide the element is. Here, that value is 100px, which means 100 pixels. \"px\" is a fixed amount of unit when you're measuring length in CSS and is very commonly used. To change the height of the element, use the \"height\" CSS property, which tells the browser how tall the element is. Here, we also used the \"px\" unit so the width and the height of the element are the same. Here's the result (we added a background to visualize):</p>[LAB]<p>As you see in the example above, the element's size changes with the width & height properties. They can be used without each other but most of the time they're used together to set the size. If you don't set anything, the element's gonna shrink to the smallest size that fits the text and content inside the elemtent. If you want multiple elements to have the same size, definitely use the width & height properties.</p><code class=\"code\">width: 100vw;<br />height: 100vh;</code><p>Above is another way to set your element's size. We used \"px\" for the unit previously, but this time, we used the \"vw\" and \"vh\" units for the length. \"vw\" stands for viewport width and \"vh\" is viewport height. 100vw means 100% of the screen's width, and 100vh means 100% of the screen's height. In this example, the viewport is the output box, so if you paste the code into the example, you'll see the element enlarges to 100% of the output box's size.</p><p>If you paste the code in correctly, you'll probably notice that there's some white space outside of the boxes even though you set the size to 100%. We'll explore more about that white space in the next tutorial, so click Next and continue learning more CSS!</p>",
      "unit": "Adding Space",
      "articleName": "CSS Width & Height",
      "articleDate": "6.12.2024",
      "articleRelease": "6.7.2024",
      "author": "Tony",
      "interactiveHTML": "<div>I'm 100 pixels tall and 100 pixels wide</div>\n<p>I'm shorter but wider</p>",
      "interactiveCSS": "div {\n  width: 100px;\n  height: 100px;\n  background-color: lightblue;\n}\np {\n  width: 200px;\n  height: 50px;\n  background-color: lightgreen;\n}",
      "id": 5
    },
    {
      "paragraph": "<p>To make a website visually pleasing and usable, the elements need to be simple and spaced out instead of small text and images all clumped together. With CSS's padding and margin properties, you can add space inside and outside different elements to make the website less dense, making it easier to take in and view the page.</p><code class=\"code\">padding: 50px;<br />margin: 50px;</code><p>If you think of an element as a box, then padding is the space between the content inside the box and the edge of the box. For example, you have a button where you want to add space between the text and the border of the button. You can give the button element a padding to create space on all four sides of the text. On the other hand, margin is the space outside of the element. It can seperate elements from each other by giving them a reserved space outside, which is the margin.</p>[LAB]<p>As you can see in the example above, the top element with a padding of 50px have much more space between the text and the edge of the blue box. That is padding at work, adding space inside the element. Conversely, the bottom element doesn't have any space inside of the blue box (no padding), but has much more blank space outside of the blue box. To have a better understanding of padding and margin, please play around with the values of the example above and see how the space changes.</p><code class=\"code\">padding-top: 50px;<br />margin-bottom: 50px;</code><p>Padding and margin adds space on all four sides of an element, but what if you only want to have padding on the top of an element? You'll want to use the property padding-top in this case. padding-top only adds space on the inside of the top of an element, and not the other three sides. There's also padding-left, padding-right, and padding-bottom, which are for the other 3 sides of the element. Margin works the same way too. But what if you only want to have padding on top and on the bottom of an element? You can use padding-block to achieve this. Use padding-inline to add spacing on the left and right of the inside of an element. There's a bunch of other padding and margin properties for direction control, so feel free to check out our references or search them up to master CSS padding and margin even more!</p><p>Padding and margin are similar, because they both add space to an element. The key difference is that padding adds space <b>inside</b> of the element, while margin adds space <b>outside</b> of the element. Also note that padding and margin won't work on HTML inline elements (img, a, span, etc), to make them work, set these elements to display: block; using CSS.</p>",
      "unit": "Adding Space",
      "articleName": "CSS Padding & Margin",
      "articleDate": "8.2.2024",
      "articleRelease": "8.2.2024",
      "author": "Tony",
      "interactiveHTML": "<div>I have a padding of 50px.</div>\n<p>I have a margin of 50px.</p>",
      "interactiveCSS": "div {\n  padding: 50px;\n  background-color: lightblue;\n}\np {\n  margin: 50px;\n  background-color: lightblue;\n}",
      "id": 6
    },
    {
      "paragraph": "<p>To really master spacing of elements, you need to first understand how CSS works. From width, height, padding, margin, and border, they're all connected to the CSS box model. Here, we'll explore what CSS box model is.</p><p>Every HTML element you have on a page has a CSS box model, and it has several components: content, padding, border, and margin. Let's say you have a normal element, a div, and you have some text inside it. The text is the content of the box (element). The padding you apply to the div is the padding of the box. The border of the box is the border, and the margin of the box is the margin. Pretty intuitive, right? Yeah, that's how simple the CSS box model is. The only tricky part is when you apply width and height. If you apply a width/height to the div, it sets the total width/height of the combination of padding + content to the width/height value. For example, if the div's text (content) has a width of 50px without padding/border/margin, and you apply a 20px padding on all four sides, then the total width of the element (box) will be 50 + 20 + 20 which is 90px. An element's margin and border does not count as part of the element's height or width.</p><p>In conclusion, the browser renders HTML elements' CSS styles according to the CSS box model, which contains the content, padding, border, and margin of an element. The actual width/height of the element is only composed of the width.height of the content plus the padding.</p>",
      "unit": "Adding Space",
      "articleName": "CSS Box Model",
      "articleDate": "8.2.2024",
      "articleRelease": "8.2.2024",
      "author": "Tony",
      "id": 7
    },
    {
      "paragraph": "<p>A website is really boring without some font. Content is the core of all websites, especially text. To make text easier to read, more pleasing to look at, or pop out, you can use CSS font to style their sizes, styles, font library, and more.</p><code class=\"code\">font-family: Arial, Helvetica, sans-serif;<br />font-size: 20px;<br />font-weight: bold;<br />font-style: italic;<br />font-variant: small-caps;<br /></code><p>These are the most common and useful CSS properties for styling fonts and text on your page. The font-family property sets the actual font of the text. It can be the serif, sans-serif, or monospace famamilies. You can also set other fonts if you import them. The font-size property sets the size of the text according to each letter's height. The font-weight property sets the bolding of the text. It can also be number values from 100 to 900. The font-style property sets whether or not you want the text to be italicized or obliqued. The font-variant property is a little advanced, in which it sets the different variants of the font. The rule font-variant: small-caps; sets all the non-caps letters to caps, except smaller in size. Here's an example of all the font properties:</p>[LAB]<p>In the above example, we set the &lt;p&gt; tag's font (font-family) to Arial, Helvetica, sans-serif. We also used the font-size property to make the size 20px. We used the font-weight and font-style properties to make the text bolded and italicized. We used the font-variant property to make all lowercase letters caps, but smaller. Feel free to change up the values of these rules to explore the wide variety of styling options CSS font really gives you. Have fun styling text!</p>",
      "unit": "Text & Content",
      "articleName": "CSS Font",
      "articleDate": "8.2.2024",
      "articleRelease": "8.2.2024",
      "author": "Tony",
      "interactiveHTML": "<p>Some random text being styled.</p>",
      "interactiveCSS": "p {\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 20px;\n  font-weight: bold;\n  font-style: italic;\n  font-variant: small-caps;\n}",
      "id": 8
    },
    {
      "paragraph": "<p>Although CSS text sounds the same as CSS font, and they both apply styling to text, they are different. CSS font focuses on the letters of the text, and CSS text focuses on the text as a whole and apply styling to it. Below, we'll explore some of the common CSS text properties.</p><code class=\"code\">text-align: center;<br />text-decoration: underline dotted;<br />text-shadow: 0px 0px 5px black;<br />line-height: 30px;<br />letter-spacing: 5px;<br /></code><p>The first text property, text-align, is straightforward: it aligns the text to the left, center, or right. The second property, text-decoration, adds decoration to the text. You can make the text overline, line-through, or underline with the first value. The second value sets the line style like solid, dashed, dotted, and wavy. The text-shadow property adds a blurred shadow behind the text as if the text was floating. The first two values (0px 0px in this case) sets the position of the shadow, with the first being the X position and the second the Y position. The third value (5px) is how wide, or how blurred, the shadow blur is spreading out. The last value (black) sets the color of the text shadow. The next property, line-height, sets how much vertical space is in between each line of text. The final letter-spacing property sets how far apart each letter in the text is. Experiment with the values below to see how they work!</p>[LAB]<p>As you can see, with the new properties applied to the &lt;p&gt; tag, the text is now centered, has a dotted underline, has a custom line height and letter spacing, with a faint black shadow in the background. With the powerful CSS text, you can apply so much customization on your text and make them more readable and visually appealing. Have fun utilizing these properties!</p>",
      "unit": "Text & Content",
      "articleName": "CSS Text",
      "articleDate": "8.3.2024",
      "articleRelease": "8.3.2024",
      "author": "Tony",
      "interactiveHTML": "<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Nulla nihil dolore, possimus rerum error exercitationem voluptates similique.</p>",
      "interactiveCSS": "p {\n  text-align: center;\n  text-decoration: underline dotted;\n  text-shadow: 0px 0px 5px black;\n  line-height: 30px;\n  letter-spacing: 5px;\n}",
      "id": 9
    },
    {
      "paragraph": "<p>Aligning things is important. No matter if it's a building, furnitures at your house, images on a website, or anything, we always align stuff to keep things organized and simple. We've already covered aligning text with text-align: center, but what if you want to align an image to the center? Or a div element? We'll do that in this tutorial.</p><code class=\"code\">background-color: lightblue;<br />width: 50px;<br />margin-inline: auto;</code><p>We added background-color and width just for you to visualize and see the element better. The main property that actually aligns the element here is margin-inline: auto. When you set the margin of something to \"auto\", the browser tries to give the element as much margin as possible that still fits on the page. This results in equal maximum margin on the left and the right side of the element (margin-inline property), making the element aligned in the center. You can also use margin-left: auto; to give maximum margin to only the left side of the element, thus aligning it to the right of the page. Try it out yourself below!</p>[LAB]<p>As in the example above, the &lt;p&gt; element is properly aligned to the center of the screen using the margin-inline: auto CSS rule. Note that this technique only works on HTML block elemenets, not inline elements, so set the inline elements to display: block if you want to use this technique to align elements to the center.</p>",
      "unit": "Text & Content",
      "articleName": "CSS Align",
      "articleDate": "8.3.2024",
      "articleRelease": "8.3.2024",
      "author": "Tony",
      "interactiveHTML": "<p>An element being aligned.</p>",
      "interactiveCSS": "p {\n  background-color: lightblue;\n  width: 100px;\n  margin-inline: auto; \n}",
      "id": 10
    },
    {
      "paragraph": "<p>Welcome to the advanced section of the CSS course here on MacLearn! Today, we'll be learning how to arrange the layout of your website with the powerful CSS display property.</p><code class=\"code\">display: block;<br />display: inline;<br />display: inline-block;<br />display: none;<br /></code><p>Above, we have four different display rules, even though there are tons more display values that you can play around with, but these four are the most useful and intuitive. The display property basically changes how the element behaves in accordance to the CSS box model, which we've covered earlier. First, we have display: block;. It lets the element behave like a block, meaning that it stretches out to its maximum width and pushes(breaks) other elements around it into a new line on the page, making them stack vertically on the page. The block also maintains its padding and margin if you've set any. display: inline; is a seperate story though. The element is now literally in-line, like a word in a paragraph. It doesn't stretch out fully and doesn't break into a new line. Additionally, some padding/margin will work differently, and the height and width properties also don't apply to inline elements. Well, what if you want to set the height and width of an element but you don't want it to break into a new line? That's where display: inline-block; comes in! With this value, the element behaves exactly like a block element, with custom sizes and padding/margin, except it doesn't break into a new line! Lastly, display: none; makes the element invisible and basically \"removes\" it from the page, so it doesn't take up any space.</p>[LAB]<p>Feel free to try out the different display values along with different sizes and padding/margin in the playground above and see what happens to the block, the text, and the layout of the page! After you're confident on your knowledge, move on and learn about CSS flexbox, arguably the most important CSS property on webpage layout. Have fun!</p><h2>Bonus: corner rounding</h2><p>If you pay attention to websitesm you'll notice rounded corners are everywhere in modern design. From a video's edges, an image's corners, and even the buttons below, are rounded. How exactly do we get rid of the sharp corners and replace them with smooth rounded corners using CSS?</p><code class=\"code\">border-radius: 20px;<br />border-radius: 0px 10px 20px 30px;</code><p>You only need one CSS property to achieve this effect: border-radius. Imagine the corner as a circle. This property determines how wide the circle should be using the radius defined, using pixels (px), and replaces the sharp corner with the round circle, achieving the rounded effect. The more the radius, the more rounded the corner becomes. The first rule in the snippet above applies a corner radius of 20px to all 4 corners of the element. What if you want different roundness on different corners? The second rule applies different values to each corner. The first value is for the radius of the top-left corner, the second value for top-right, the third for bottom-right, and the fourth for bottom-left. Feel free to try it out and see the magic at work!</p>",
      "unit": "Laying Out Stuff",
      "articleName": "CSS Display",
      "articleDate": "8.14.2024",
      "articleRelease": "8.14.2024",
      "author": "Tony",
      "interactiveHTML": "Some text <div>An element</div> some text.",
      "interactiveCSS": "div {\n  background-color: lightblue;\n  display: block;\n}",
      "id": 11
    },
    {
      "paragraph": "<p>Sure, you can position several elements using padding and margin, or even the &lt;br&gt; tag. But is it efficient? Does it really achieve the layout you want? Is it flexible enough? CSS flexbox is all three of these. It's efficient, powerful, and flexible at laying out elements.</p><code class=\"code\">display: flex;<br />justify-content: center;<br />align-items: center;<br />flex-direction: column;<br />flex-wrap: wrap;</code><p>To make all these properties work, you need to set the display of the container of the elements to display: flex; To understand how flexbox works, first imagine three elements being attached to an axis. The flex-direction property specifies whether the axis is horizontal or vertical. The property justify-content tells the browser how to position the three elements along the axis. It can be at the center of the axis, at the start/end of it, or equally spaced out from each other. Now imagine there's some space around the axis, forming a box (flexbox). align-items determines where the axis should be aligned. At the beginning edge of the box, the center of the box, or the end of the box. Note that align-items moves the axis itself, and justify-content moves the elements along the axis. Well, what if there's too many elements and the axis is full? The flex-wrap property tells the browser to create a new axis directly after (and parallel) the original axis and put the extra elements on it if the original axis is full.</p>[LAB]<p>As you can see above, the elements are being aligned in the center (horizontally and vertically) of the orange container without any margin or padding thanks to the justify-content and align-items properties. And because of flex-wrap: wrap; element 4 is being wrapped to a new line (axis), and not overflowing the orange container. Although there is a ton more properties, values, and techniques related to flexbox, these are the major ones you'll use the most often, so play around with the values and properties and see what happens!</p><h2>Summary</h2><p>CSS flexbox is a very powerful tool for laying out elements. display: flex turns a container into a flexbox, justify-content positions the elements within the container along an axis, and align-items positions the axis within the container. flex-wrap wraps overflowing elements into a new axis and flex-direction changes the direction on the axis. To put the axis analogy into the real world of flexbox, the box containing the axes is the HTML element that contains the elements you want to layout. The objects on the axis are the elements in the container box, or flexbox, that you want to lay out.</p><p>We know we covered a lot in this tutorial, but if you take the time to understand, learn, and actually try flexbox out, you'll find that it is incredibly powerful and useful. From simply aligning something to the center or making the elements line up in a row, to creating interactive cards and buttons, flexbox's usage is everywhere. Have fun 🔥!</p>",
      "unit": "Laying Out Stuff",
      "articleName": "CSS Flexbox",
      "articleDate": "8.15.2024",
      "articleRelease": "8.15.2024",
      "author": "Tony",
      "interactiveHTML": "<div class=\"container\">\n  <div class=\"children\">Element 1</div>\n  <div class=\"children\">Elememt 2</div>\n  <div class=\"children\">Element 3</div>\n  <div class=\"children\">Element 4</div>\n</div>",
      "interactiveCSS": ".container {\n  background-color: orange;\n  height: 200px;\n  width: 200px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: row;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n.children {\n  background-color: lightblue;\n  text-align: center;\n  width: 50px;\n  height: 50px;\n}",
      "id": 12
    },
    {
      "paragraph": "<p>Although you can use padding and margin, or even flexbox to place elements in a certain place, but the layout might break when you zoom in or out. With CSS positioning, this problem is easily fixed, and it comes with a bunch of other useful techniques for layout in CSS.</p><code class=\"code\">position: absolute;<br />top: 5px;<br />left: 10px;<br /></code><p>The first property we have is the position property. It tells the browser how to position the element. In this case, it's absolute, meaning that the element is \"pinned\" to an absolute position on the screen, and it's not affected by any other elements on the page, even if that means overlapping. The top property tells the browser how far away the top of the element is from the top edge of the screen, and the left property defines the distance between the left of the element to the left edge of the screen. By using the top and left properties, we gave the browser a coordinate to pin, or position the element. You can also use right and bottom properties, which also work the same way.</p>[LAB]<p>There are also different position values, such as position: sticky; and position: fixed. If you set the value to sticky, the element will \"stick\" to a certain position when you scroll, meaning that the element stays on the screen, even if you scroll. position: fixed; is kind of like position: sticky; except that the element stays at the same spot even if you don't scroll.</p><code class=\"code\"> z-index: 100; </code><p>Think of the browser rendering a webpage as stacking pieces. Every time an element is loaded, it is stacked on top of the previous element, making multiple layers on a single page. The z-index property overrides the layers and brings a specific element to a specific layer. The value determines which layer the element goes to. The higher the value, the higher the element is stacked on the page. You can set it to the top so nothing covers or overlaps it on the page. You can also bring an element to the bottom of the layers by setting the z-index property to -1.</p><h2>Bonus: float</h2><p>Imagine if you have a long paragraph, and you want to put a picture in it so that the picture is on the right of the paragraph and the text in the paragraph wraps around the picture. How are you going to do that with CSS? That's what float is designed to do. Simple give the element you want to float in a paragraph (like the example above) float: left; or float: right; to make the element float to the left or the right with other elements on the page wrapping around it. Keep in mind that this doesn't only apply to pictures in paragraphs, but you can also use float with any element to achieve this effect, have fun!</p>",
      "unit": "Laying Out Stuff",
      "articleName": "CSS Position",
      "articleDate": "8.29.2024",
      "articleRelease": "8.29.2024",
      "author": "Tony",
      "interactiveHTML": "<div class=\"element\">I am 30 pixels away from the top and the left of the screen.</div>",
      "interactiveCSS": ".element {\n  background-color: orange;\n  height: 100px;\n  width: 100px;\n  position: absolute;\n  top: 30px;\n  left: 30px;\n}",
      "id": 13
    },
    {
      "paragraph": "<p>Imagine a situation where a lot of the elements on your page use the same background color, but it's only for the dark mode of the page, and you need to set a new background color for each element again if the user activates the light mode. How can you achieve this with minumum code? That's where CSS variables come in. In this tutorial, we'll teach you the basics of CSS math functions and variables.</p><code class=\"code\">width: calc(50vw - 100px);<br />background-color: var(--bg-color);</code><p>Maybe you've already noticed the weird calc and var values with parenthesis. These are called CSS value functions. The calc() value function involkes, or runs, a built-in CSS function that does math calculations with CSS values. In this example, the calc() function sets the element's width to the difference of 50vw and 100px. Why do we want to use the math function when we can just set a simple, say, 50px width to an element? It's for flexibility. You may want to create elements that adapt to different screen sizes by having values with different units combined so the elements look great on any device. As of the other value function, var(), it's basically just a placeholder for the value of the property. In this example, it replaces the actual value of the background-color property with the --bg-color variable. This is very useful when you want to have the same value applied to many different elements. With CSS variables, you don't have to reset the values one by one when you want to change them, instead, you can just change one variable, and the change is applied to all the elements with that variable. Note that you have to set the variable first in the :root selector (see example below), and the variable name must always begin with 2 dashes --.</p>[LAB]<p>In conclusion, calc() and var() are both CSS value functions that are powerful features in CSS. calc() uses math to calculate the value of 2 values with different units combined. The var() function returns the variable's value. It's very useful when you want to dynamically change a CSS value across multiple elements without changing them one by one.</p>",
      "unit": "Useful CSS Tips",
      "articleName": "CSS Math",
      "articleDate": "8.29.2024",
      "articleRelease": "8.29.2024",
      "author": "Tony",
      "interactiveHTML": "<div class=\"element\">My width is calculated with calc() and my background color came from a variable.</div>",
      "interactiveCSS": ":root {\n  --bg-color: orange;\n}\n.element {\n  width: calc(50vw - 100px);\n  background-color: var(--bg-color);\n}",
      "id": 14
    },
    {
      "paragraph": "<p>Let's say you're setting an element's background color to red using the style attribute in HTML (inline style), and you want to change the background color to orange whenever someone hovers their mouse over the element. If you think putting background-color: orange; in the element's :hover class selector will solve this problem, then you'll be wrong. In this tutorial, you'll learn about CSS specificity, the !important property, and more.</p><code class=\"code\">.element {background-color: red;}<br />div {background-color: orange !important;}</code><p>Looking at the two rules above, what will be the background color of the div element with the element class? Will it be red or orange? The answer is orange. But if you take off the !important property behind the orange value, then the element will be red. I know this sounds confusing, but stick with me. CSS specificity is a set of rules that tell the browser which value to apply to an element if it has a property with two conflicting values. Inline styles (style attribute) are always the most important, meaning that it overrides any other value set to the same property on an element. Then, it's the element's id selector, then the class selector, and finally the element type selector. Now that you have a grasp of CSS specificity, let's come back to the scenario in the intro above. Because you're applying the new background color in the class selector, and the original background color was set using inline style, CSS specificity tells the browser to ignore the background color set in the class selector because inline style has a higher importance than class selector. To solve this problem, you can apply the<br />!important property at the end of the rule that you want to set a higher importance. !important makes the rule override everything, even inline styles. So with the help of !important, you can make a type selector's rule override an inline style rule!</p>[LAB]<p>If you remove the !important property from the div selector in the example above, then you'll see that the element is back to red, because the div selector no longer overrides, which has a higher priority according to CSS specificity. Pro tip: avoid using the !important property everywhere because it messes up CSS specificity and you'll end up with more confusion than solution. Instead, still follow CSS specificity to style an element, and only use !important when absolutely necessary.</p>",
      "unit": "Useful CSS Tips",
      "articleName": "CSS !important",
      "articleDate": "8.31.2024",
      "articleRelease": "8.31.2024",
      "author": "Tony",
      "interactiveHTML": "<div class=\"element\">Although the .element selector makes me red, the !important property from the div selector overrides it and makes me orange.</div>",
      "interactiveCSS": ".element {\n  background-color: red;\n}\ndiv {\n  background-color: orange !important;\n}",
      "id": 15
    },
    {
      "paragraph": "<p>Think of CSS pseudo-classes as \"extensions\" of CSS selectors, or a more advanced version of selectors that select an element only when it's in a special state. For example, you can change an element's appearance while being hovered using the :hover pseudo class.</p><code class=\"code\">.element:hover {background-color: red;}<br />.element:active {background-color: green;}<br />.element:first-child {background-color: blue;}<br />.element:last-child {background-color: yellow;}<br />.element:before {<br />&nbsp;&nbsp;content: \"Before element\";<br />&nbsp;&nbsp;background-color: gray;<br />&nbsp;&nbsp;width: 100px;<br />}</code><p>You might have already noticed the :hover, :active, and :before pseudo classes attached to the element class in the example above. Note that all pseudo classes start with one colon : and is directly attached to the selector without any spaces. The styles defined in the :hover pseudo class only apply to the element when it is being hovered over by the user. The :active styles only apply to the element when it is being clicked. The :first-child psuedo class applies styles to an element only if it is the first child of its parent, and :last-child targets the last child of its parent. The :before pseudo class is a bit different. It basically creates a new element that belongs to the original element, but as a \"before\" extension. The content property gives the before element actual text content. There's also another pseudo class, :after, which works exactly the same as :before, except it's created after the original element. An element can have both the :before and the :after pseudo classes at the same time.</p>[LAB]<p>From the example above, you can see that the first element (child) is being highlighted in blue because of the :first-child pseudo class, and the last element is in yellow because of :last-child. Now, when you hover over the other elements, they turn red because of the :hover pseudo class. When you're not hovering over them, they turn back to white because the :hover pseudo class only applies to the element when it is being hovered. Same as the :active pseudo class, the elements only turn green when you click on them. You can also see that each element has a gray \"Before element\" that appears before them. That's the :before pseudo class at work.</p><p>The reason the first child and the last child don't have the :hover and :active effects is because their styles are defined later in the CSS, so it overrides the previous rules. Feel free to play around and explore different pseudo-classes to really learn how they work and how useful they are when creating webpages. From hover effects to applying different styles, pseudo-classes can do them all.</p>",
      "unit": "Useful CSS Tips",
      "articleName": "CSS Pseudo",
      "articleDate": "8.31.2024",
      "articleRelease": "8.31.2024",
      "author": "Tony",
      "interactiveHTML": "<div>\n  <div class=\"element\">First child</div>\n  <div class=\"element\">Second child</div>\n  <div class=\"element\">Third child</div>\n  <div class=\"element\">Fourth child</div>\n  <div class=\"element\">Last child</div>\n</div>",
      "interactiveCSS": ".element:hover {\n  background-color: red;\n}\n.element:active {\n  background-color: green;\n}\n.element:first-child {\n  background-color: blue;\n}\n.element:last-child {\n  background-color: yellow;\n}\n.element:before {\n  content: \"Before element\";\n  background-color: gray;\n  width: 100px;\n}",
      "id": 16
    },
    {
      "paragraph": "<p>Almost all the websites out there have some kind of animation or transition to make its user experience smooth, engaging, and appealing. Today, we'll learn how to create smooth transitions on your webpage using CSS transition.</p><code class=\"code\"> transition: background-color 0.5s 1s ease; </code><p>To create a smooth change when an element’s style is changed, we use the transition property. For example, there's a blue box that turns red when you hover over it. Without a transition, the color change happens instantly. But with a transition, the color gradually shifts from blue to red, creating a smooth effect. The first value we see in the example above is background-color. This tells the browser to only smooth out the transition of the element's background color when it's changing. If you want all the element's styles to have a transition, use the \"all\" value. The next value, 0.5s, defines the transition duration, or how long the transition is from start to finish. The third value, 1s, is transition delay, which tells the browser to wait for 1 second before starting the transition. The final value, ease, sets the timing of the transition. It can be linear, curved, or following a certain math function. In this case, the value \"ease\" tells the browser to start the transition slowly, then speed it up near the end.</p>[LAB]<p>As you can see in the example above, if you hover over the red box and wait for 1 second, it shifts from red to blue smoothly over a 0.5 second period. If your cursor leaves the box again, it will wait 1 second and smoothly change back to red over a 0.5 second period again. This is because transition applies both ways, not only when you start hovering over an element, but also when you exit the element. To fully understand how transition works, you can change the transition duration value to something like 3s so you can see the change happen slowly, or try out different values and timing. Have fun exploring transitions!</p>",
      "unit": "Creating Animations",
      "articleName": "CSS Transition",
      "articleDate": "9.1.2024",
      "articleRelease": "9.1.2024",
      "author": "Tony",
      "interactiveHTML": "<div class=\"element\">Hover over me!</div>",
      "interactiveCSS": ".element {\n  width: 100px;\n  height: 100px;\n  background-color: red;\n  transition: background-color 0.5s 1s ease;\n}\n.element:hover {\n  background-color: blue;\n}",
      "id": 17
    },
    {
      "paragraph": "<p>Animations are practically everywhere on the internet now. From scrolling animations on pragraphs and images, to smooth transitions between pages, they make users' experience on the website more interesting, smooth, and appealing. Today, we'll learn about the powerful CSS animation and how to use it.</p><code class=\"code\">@keyframes myAnimation {<br />&nbsp;&nbsp;0% {background-color: red;}<br />&nbsp;&nbsp;50% {background-color: green;}<br />&nbsp;&nbsp;100% {background-color: blue;}<br />}</code><p>To have a CSS animation, we have to \"define\" the animation first: its name, how it's done, what styles should be applied, and the timing. That's what the @keyframes rule is for. Its syntax is similar to a selector, except the selector is @keyframes followed by the animation name. In this case, it's called \"myAnimation\". We have a couple of sub-sections with different percentages within the keyframes. These define the actual process of the animation. Every style rule in the 0% section applies to the element at the start of the animation. The styles in the 50% section apply to the element at the middle of the animation. The styles defined in 100% apply to the element at the end of the animation. You can use any percentage for any percent of the progress of the animation. When the animation is run, the browser calculates the percentages and apply a smooth transition from one percentage section to another, creating an animation with more details and timing than what a normal \"transition\" could do.</p><code class=\"code\"> .element {animation: myAnimation 2s ease 1s infinite alternate;} </code><p>After defining the animation, we have to call it to actually apply it to an element and run it. To do this, add the \"animation\" property to the element you want to animate. There are a couple of values above. The first value, myAnimation, is the name of the animation so the browser knows which animation you want to apply. The second value, 2s, defines the duration of the animation from start to finish. The third value, ease, is similar to CSS transition, sets the timing of the animation to smooth out. The fourth value, 1s, tells the animation to delay for 1 second before starting. The fifth value, inifinite, tells the browser to repeat the animation indefinitely. The last value, alternate, tells the browser to alternate the order of the animation when repeating. Meaning that the original end of the animation becomes the start, and vice versa. With these values defined, you can create an animation like the example below:</p>[LAB]<p>As you can see from the example above, the element starts at red, then turns green through the middle of the animation, then turns blue. This whole sequence alternates in order inifinitely with a one second pause in between because of the animation delay, infinite and alternate values. CSS transition and animation may seem similar, but transition only transitions between two different sets of styles, while animation is a bit more complicated but it can transition from one set of rules to another, to another, and so on. For example, you can animate an element to turn from red, green, to blue, but you can only transition the element from red to blue. It's a lot more customizable and powerful. You can also add as many sub-sections within the keyframes as you like to make the animation as precise and detailed as possible. Use transitions for simple effects, and use animations for complex results and styles. Note that you can apply almost any properties to animations, not only background colors. Have fun exploring and creating animations!</p>",
      "unit": "Creating Animations",
      "articleName": "CSS Animation",
      "articleDate": "9.3.2024",
      "articleRelease": "9.3.2024",
      "author": "Tony",
      "interactiveHTML": "<div class=\"element\">I have a custom animation!</div>",
      "interactiveCSS": "@keyframes myAnimation {\n  0% {\n    background-color: red;\n  }\n  50% {\n    background-color: green;\n  }\n  100% {\n    background-color: blue;\n  }\n}\n.element {\n  animation: myAnimation 2s ease 1s infinite alternate;\n  width: 100px;\n  height: 100px;\n}",
      "id": 18
    },
    {
      "paragraph": "<p>CSS transform is a relatively new and very powerful and versatile way to move the elements around, rotate them, and do all sorts of stuff involving the properties of the element. Let's dive in and see what CSS transform can do!</p><code class=\"code\"> transform: translate(100px, 50px) rotate(45deg) scale(2); </code><p>To use the CSS transform feature, simply use the \"transform\" property, followed by the value functions (we introduced these in the CSS Math article) of the effects you want to apply to the element. In this case, it's translate, rotate, and scale. The first function, translate, moves the element. In this function, there are 2 values. The frist value, 100px, sets the movement on the horizontal axis, meaning the element is moved to the right by 100 pixels. The second value, 50px, sets the vertical axis movement, which is 50 pixels down in this case. The second function in this rule, rotate, rotates the element clockwise. The value in it (45deg) tells the browser to rotate the element by 45 degrees clockwise. The final function, scale, scales the element according to the value in it. 1 is original size, 2 is double, 3 is triple, and so on. In this case, it scales the element to double its original size.</p>[LAB]<p>As you can see from the example above, we set the element's size, background color, and gave it a font size. Then, we used the transform property to move the element 100 pixels right and 50 pixels down, rotated it by 45 degrees, and doubled its size. Note that for translate and rotate functions, you can set negative values. For example, translate(-50px, -100px) moves the element 50 pixels left and 100 pixels up (inverse); and rotate(-90deg) rotates the element 90 degrees counterclockwise. You can also set decimal values for the scale function, meaning that scale(0.5) scales the element by half. Feel free to play around with the values in the example above and see what transform can do as this is the best way to learn how they work!</p>",
      "unit": "Creating Animations",
      "articleName": "CSS Transform",
      "articleDate": "9.5.2024",
      "articleRelease": "9.5.2024",
      "author": "Tony",
      "interactiveHTML": "<div class=\"element\">I am repositioned using CSS transform.</div>",
      "interactiveCSS": ".element {\n  width: 50px;\n  height: 50px;\n  font-size: 10px;\n  background-color: red;\n  transform: translate(100px, 50px) rotate(45deg) scale(2);\n}",
      "id": 19
    },
    {
      "paragraph": "<p>Although we already covered a lot in this course, we haven't introduced a huge aspect of CSS: responsive design. Responsive design makes the website \"responsive\", so it behaves a certain way on wide screens, like computers, and behaves another on narrow screens, like phones and tablets, so it looks good on all devices. This is very important because more and more people are visiting websites using their phones, so if you only design your website to look good on computers, it will break when displaying on phones. Today, we'll learn how to prevent that using media queries.</p><code class=\"code\">.element {<br />&nbsp;&nbsp;width: 600px;<br />&nbsp;&nbsp;background-color: blue;<br />}<br /><br />@media (max-width: 600px) {<br />&nbsp;&nbsp;.element {<br />&nbsp;&nbsp;&nbsp;&nbsp;width: 200px;<br />&nbsp;&nbsp;&nbsp;&nbsp;background-color: green;<br />&nbsp;&nbsp;}<br />}</code><p>In this example, we set the element's default width to 600 pixels and gave it a blue background. Following that is the @media rule. This is called a media query, and it gives elements certain styles only when the condition in the parentheses is met. It's a little bit like pseudo classes, but specifically for giving different styles on different devices or widths. In this example, the condition in the parentheses is max-width: 600px, meaning that the styles within the media query only apply to the elements when the screen's width is smaller than 600 pixels. When this condition is not met (screen wider than 600px), the elements will have their default styles. Now that you've set a condition, you can start giving elements styles. A media query is basically like a tiny CSS file by itself, you can use selectors just like normal inside media queries, and everything works the same. In this example, we set the element's width to 100 pixels and background to green using the .element selector in the media query.</p>[LAB]<p>As you can see in the playground above, if you zoom in (or zoom out depending on your screen size), you can see that at a certain point, the element's background turns green and becomes narrower. This is media query at work! Note that you can have multiple selectors and styles within a single media query, and you can have several media queries in a single CSS file. For example, you have a media query that only triggers when the screen width is smaller than 800 pixels, and you have another query that triggers when the screen is less than 200px. This means that the first query, max-width: 800px, applies when the screen width is between 800px and 200px, and after the screen size is smaller than 200px, the second query overrides the first query and applies its styles.</p>",
      "unit": "Responsive Design",
      "articleName": "CSS Media Queries",
      "articleDate": "9.6.2024",
      "articleRelease": "9.6.2024",
      "author": "Tony",
      "interactiveHTML": "<div class=\"element\">My width and background color change if the screen size is smaller than 600 pixels.</div>",
      "interactiveCSS": ".element {\n  width: 600px;\n  background-color: blue;\n}\n@media (max-width: 600px) {\n  .element {\n    width: 200px;\n    background-color: green;\n  }  \n}",
      "id": 20
    },
    {
      "paragraph": "<p>CSS media queries are really powerful, they can change the whole website just based on the size of the screen. But it's a lot of work (and code) to turn the entire website responsive using only media queries. There's another way to turn a website responsive without so much code, although it's not as customizable or flexible as media queries. It's called a viewport, and we'll explore that today.</p><code class=\"code\"> &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; </code><p>Well, this is technially HTML, but it's more related to the topic of a website's responsive design, so we put it here, as it is more advanced. Think of the viewport as a virtual window that the browser uses to render your site. On a laptop, the virtual window matches the screen size, so the website looks fine. But on a phone, the browser shrinks that virtual window by a lot to fit the narrow screen, making everything tiny and unresponsive. Sure, you can use media queries to enlarge all the elements, but that's a lot of code for something that can be easily achieved by one HTML meta tag. This tag (shown above) tells the browser to not shrink down the virtual window when it's projecting it on the screen. Instead, it tells the browser to directly put the window on the phone's screen, even if it overflows. This makes all the elements on the phone screen they're normal size, but part of the website is overflowing. Now you can use media queries to fix the overflowing elements. Viewport tells the browser to scale the site directly for the device's screen, even if it overflows a bit. Then, you can use media queries to fine-tune the design. Have fun exploring these CSS tips!</p>",
      "unit": "Responsive Design",
      "articleName": "CSS Viewport",
      "articleDate": "9.6.2024",
      "articleRelease": "9.6.2024",
      "author": "Tony",
      "id": 21
    }
  ],
  "references": [
    {
      "paragraph": "<p>A website without links is not a website. Every day, billions of links are clicked. From website to website, from country to country. Links connect different websites. Link is one of the most important elements of all websites. This article will tell you how to add a link to your website.</p><img src=\"/media/references/a1.png\" alt=\"A link\" /><p>Here is some code of a link:<br /><br /><code>&lth1&gtA Link&lt/h1&gt<br />&lta href=\"https://google.com\"&gtGoogle&lt/a&gt<br /></code></p><p>First, we typed a heading called \"A Link\". Then, we typed the &lta&gt tags that wrap up the text \"Google\". &lta&gt tags are anchor tags that represent a link. The href attribute tells the browser to open \"https://google.com\" when user clicks on the elements that are wrapped inside &lta&gt tags. With these tags, you can make almost any element clickable link, not only text. It can be images, buttons, or even the background!<br />Here is the output of the example above:<br /></p>[LAB]<p>Always remember to put elements inside the &lta&gt tags or the link won't work! You can style it, assign it an id or a class, or give it a title. Be careful when styling these tags because they are inline tags. You can put these things in the href attribute:</p><ul><li>Any avaliable website link. (Like the example above)</li><li>Any elements on that page.<code>&lta href=\"#heading\"&gtgo to heading&lt/a&gt</code>When user clicks on this link, browser will scroll to the place where the element on the page with the id \"heading\" is.</li><li>Files in the document's folder, inner folder, or outer folder.<br />Files in the document's folder: <code>&lta href=\"image.png\"&gtimage&lt/a&gt</code>Files outside the document's folder: <code>&lta href=\"/image.png\"&gtimage&lt/a&gt</code>Files in a folder that is inside the document's folder: <code>&lta href=\"folder-name/image.png\"&gtimage&lt/a&gt</code><img src=\"/media/references/a2.png\" alt=\"image\" /></li></ul><p>Explore more about the syntax above on your own by creating files inside folders and try to reach every file in different levels of folders. It might seem very complicated, but the more you try, the more you learn. (And it's really not that hard) Good luck exploring the anchor tags!</p>",
      "unit": "HTML Tags",
      "articleName": "The <a> Tags",
      "articleDate": "2.25.2023",
      "articleRelease": "2.25.2023",
      "author": "Tony",
      "interactiveHTML": "<h1>A Link</h1>\n<a href=\"https://google.com\" target=\"_blank\">Google</a>",
      "id": 0,
      "sidebarText": "<a>"
    },
    {
      "paragraph": "<p>It's very common to start a new line for different paragraphs, but <b>how to do it in HTML?</b> This article will tell you how to start a new line in your webpage.</p><img src=\"/media/references/br1.jpg\" alt=\"An image\" /><p>This is what you need to do:<br /><br /><code> &ltbr> </code><br /><span style=\"font-size: 17px\"><i>Note: &ltbr&gt tag doesn't have a closing tag.</i></span><br /><br /></p><p>That easy? Yes, you just need to type &ltbr&gt and a new line<br />is<br />here.</p><p>Unfortunately, there isn't a way to style the &ltbr&gt tag. But you can give it id or class atrributes for JavaScript.</p>",
      "unit": "HTML Tags",
      "articleName": "The <br> Tag",
      "articleDate": "2.20.2023",
      "articleRelease": "2.20.2023",
      "author": "Tony",
      "id": 1,
      "sidebarText": "<br>"
    },
    {
      "paragraph": "<p>Headings make reader knows what's the article, image, chart, map... is mainly about. Headings are everywhere. This article will tell you how to make headings in HTML.</p><img src=\"/media/references/heading1.jpg\" alt=\"A newspaper full of headings\" /><figcaption>A newspaper full of headings</figcaption><p>Here is some code of headings:<br /><br /><code>&lth1&gtI'm the biggest heading&lt/h1&gt<br />&lth2&gtI'm the second biggest heading&lt/h2&gt<br />&lth3&gtI'm the third biggest heading&lt/h3&gt<br />&lth4&gtI'm the third smallest heading&lt/h4&gt<br />&lth5&gtI'm the second smallest heading&lt/h5&gt<br />&lth6&gtI'm the smallest heading&lt/h6&gt</code></p><br /><span style=\"font-size: 17px\"><i>Note: Every heading tag has a closing tag.</i></span><br /><br /><p>We listed 6 different levels of heading above. The first level is &lth1&gt&lt/h1&gt tags, which is the biggest heading. The sixth level is &lth6&gt&lt/h6&gt tags, which is the smallest heading.<br />Here is the output:<br /></p>[LAB]<p>Always remember to put each heading's closing tag to wrap up the text inside the tags. You can style headings, give them id or class, or give them titles. &lth1&gt&lt/h1&gt and &lth2&gt&lt/h2&gt are the heading tags used most often. Have fun exploring heading tags!</p>",
      "unit": "HTML Tags",
      "articleName": "Heading Tags",
      "articleDate": "2.22.2023",
      "articleRelease": "2.22.2023",
      "author": "Tony",
      "interactiveHTML": "<h1>I'm the biggest heading</h1>\n<h2>I'm the second biggest heading</h2>\n<h3>I'm the third biggest heading</h3>\n<h4>I'm the third smallest heading</h4>\n<h5>I'm the second smallest heading</h5>\n<h6>I'm the smallest heading</h6>",
      "id": 2,
      "sidebarText": "<h1> - <h6>"
    },
    {
      "paragraph": "<p>When you have different paragraphs or sections on your webpage, its very handy to use a line that seperates them (Like that line ⬆️). This article will tell you how to do this in HTML.</p><p>This is what you need to do:<br /><br /><code>&lthr> </code><br /><span style=\"font-size: 17px\"><i>Note: &lthr&gt tag doesn't have a closing tag.</i></span><br /><br /></p><p>hr here stands for \"horizontal rule\", which means it starts a new line like &ltbr&gt tag, then it draws a line like this:</p>[LAB]<p>This tag is very helpful when you need to seperate different contents or sections. You can style it, give it a title, or assign it an id or a class.</p>",
      "unit": "HTML Tags",
      "articleName": "The <hr> Tag",
      "articleDate": "2.20.2023",
      "articleRelease": "2.20.2023",
      "author": "Tony",
      "interactiveHTML": "Some text\n<hr>\nHorizontal rule separates the text",
      "id": 3,
      "sidebarText": "<hr>"
    },
    {
      "paragraph": "<p><b>Almost <em>every</em> webpage has images on it.</b> Images give users a visual understanding for a thing. This article will tell you how to put images on your webpage.</p><img src=\"/media/references/img1.jpg\" alt=\"An image\" /><p>This is an image tag's code:<br /><br /><code> &ltimg src=\"example.png\" alt=\"Image\"> </code><br /><span style=\"font-size: 17px\"><i>Note: &ltimg&gt tag doesn't have a closing tag.</i></span><br /><br />In this line of code:<br /></p><ul><li>&ltimg&gt tells the browser this is an image tag.</li><li>\"src\" (source) attribite tells the browser to show image \"example.png\" on the screen. It can be a link of an online image or the path to an local image.</li><li>If the browser couldn't find the image correctly, it would show whatever is in the \"alt\" (alternate text) attribute on the screen.</li><li>Usually the image will be very big. To make it smaller, you can add \"style\" attribute or \"width\" attribute, and folow CSS syntax to style the image:<br /><code>&ltimg src=\"example.png\" style=\"width:100px;\"></code></li></ul><p>The list above shows 4 most important elements of an &ltimg&gt tag. You can also style it, give it an id or a class, or give it a title by adding other attributes.</p>",
      "unit": "HTML Tags",
      "articleName": "The <img> Tag",
      "articleDate": "2.19.2023",
      "articleRelease": "2.19.2023",
      "author": "Tony",
      "id": 4,
      "sidebarText": "<img>"
    },
    {
      "paragraph": "<p>Lists are everywhere. Shopping lists, to-do lists, menu lists... You can also make unordered lists or number-ordered lists on your webpage. This article will tell you how to do this in HTML.</p><h2 class=\"article-subheading\">1. Unordered List</h2><p>Here is some code of an unordered list example:<br /><br /><code>&lth1&gtMy Shopping List&lt/h1&gt<br />&ltul&gt<br /><span style=\"color: transparent\">www</span>&ltli&gtFood&lt/li&gt<br /><span style=\"color: transparent\">www</span>&ltli&gtToys&lt/li&gt<br /><span style=\"color: transparent\">www</span>&ltli&gtShirts&lt/li&gt<br />&lt/ul&gt</code></p><p>At the first line, we created a heading called \"My Shopping List\".<br />At the second line, we typed &ltul&gt&lt/ul&gt tags. These tags tell browser the elements wrapped inside them are parts of an <b>unordered list</b>.<br />To define the list items, we typed 3 &ltli&gt&lt/li&gt pairs with food, toys, or shirts inside them.<br />This is the output of the code:</p>[LAB]<p>Always remember to put &ltli&gt&lt/li&gt tags inside &ltul&gt&lt/ul&gt tags when creating an unordered list. These tags are very helpful when organizing things on your webpage. You can style it, give it a title, assign it an id or a class, or do whatever you want with it. Have fun exploring &ltul&gt&lt/ul&gt tags!</p><h2 class=\"article-subheading\">2. Ordered List</h2><p>Here is some code of an ordered list example:<br /><br /><code>&lth1&gtHow To Learn Coding&lt/h1&gt<br />&ltol&gt<br /><span style=\"color: transparent\">cpc</span>&ltli&gtGo to coding place.&lt/li&gt<br /><span style=\"color: transparent\">cpc</span>&ltli&gtTake some time to learn and practice.&lt/li&gt<br /><span style=\"color: transparent\">cpc</span>&ltli&gtPractice some more.&lt/li&gt<br /><span style=\"color: transparent\">cpc</span>&ltli&gtAnd your done!&lt/li&gt<br />&lt/ol&gt</code></p><p>At the first line, we created a heading called \"How To Learn Coding\".<br />At the second line, we typed &ltol&gt&lt/ol&gt tags. They tell browser the elements wrapped inside them are parts of an <b>number-ordered list</b>.<br />To define the list items, we did the same thing as &ltul&gt&lt/ul&gt tags:<br />&ltli&gt&lt/li&gt pairs.<br />This is the output of the code:</p>[LAB]<p>Always remember to put &ltli&gt&lt/li&gt tags inside &ltol&gt&lt/ol&gt tags or it won't work! These tags are very helpful when listing steps to do something on your webpage. You can style it, give it a title, assign it an id or a class, or do whatever you want with it. Have fun exploring &ltol&gt&lt/ol&gt tags!</p><h2 class=\"article-subheading\">Bonus: How to change the label before a list item?</h2><p>Maybe you want a square before &ltul&gt list item instead of a circle, or you want alphabat-ordered items instead of number-ordered items in &ltol&gt tags. You can do this by styling the &ltul&gt or &ltol&gt tags.<br />Here is how you do it in HTML:<br /><br /><code>&lth1&gtStyling ul Tags&lt/h1&gt<br />&ltul style=\"list-style-type: square;\"&gt<br /><span style=\"color: transparent\">cpc</span>&ltli&gtAn item.&lt/li&gt<br /><span style=\"color: transparent\">cpc</span>&ltli&gtAnother item.&lt/li&gt<br /><span style=\"color: transparent\">cpc</span>&ltli&gtThe last item.&lt/li&gt<br />&lt/ul&gt</code></p><p>The structure is still same , but we added a style attribute on the &ltul&gt tag in order to style the label. Type \"list-style-type\" so you can choose any label avaliable in HTML5. We used square, but there are none, circle, decimal (number), alpha (alphabet), and many more choices you can explore. Styling ordered list is exactly the same, no difference.<br />This is the output:</p>[LAB]<h2 class=\"article-subheading\">Summary</h2><p>List tags are very important and useful. They are &ltul&gt tags which means unordered list; &ltol&gt tags which means ordered list; and &ltli&gt tags which wrap up list items and can be put inside &ltul&gt tags or &ltol&gt tags. To style the label of a list item, use styling method and type \"list-style-type\" to choose any avaliable labels.</p>",
      "unit": "HTML Tags",
      "articleName": "Creating Lists",
      "articleDate": "3.3.2023",
      "articleRelease": "3.3.2023",
      "author": "Tony",
      "interactives": [
        "<h1>My Shopping List</h1>\n<ul>\n  <li>Food</li>\n  <li>Toys</li>\n  <li>Shirts</li>\n</ul>",
        "<h1>How to learn coding</h1>\n<ol>\n  <li>Go to MacLearn.</li>\n  <li>Take some time to learn and practice.</li>\n  <li>Practice some more.</li>\n  <li>And you're done!</li>\n</ol>",
        "<h1>Styling ul Tags</h1>\n<ul style=\"list-style-type: square\">\n  <li>An item.</li>\n  <li>Another item.</li>\n  <li>The last item.</li>\n</ul>"
      ],
      "id": 5,
      "sidebarText": "List Tags"
    },
    {
      "paragraph": "<p>Tables are an important element of websites, especially when presenting data or comparing/contrasting different things. Today, we're going to learn about creating tables with HTML.</p><code>&lttable&gt<br /><span style=\"color: transparent; user-select: x\">ww</span>&ltthead&gt<br /><span style=\"color: transparent; user-select: x\">wwww</span>&lttr&gt<br /><span style=\"color: transparent; user-select: x\">wwwwww</span>&ltth&gtName&lt/th&gt<br /><span style=\"color: transparent; user-select: x\">wwwwww</span>&ltth&gtScore&lt/th&gt<br /><span style=\"color: transparent; user-select: x\">wwww</span>&lt/tr&gt<br /><span style=\"color: transparent; user-select: x\">ww</span>&lt/thead&gt<br /><br /><span style=\"color: transparent; user-select: x\">ww</span>&lttbody&gt<br /><span style=\"color: transparent; user-select: x\">wwww</span>&lttr&gt<br /><span style=\"color: transparent; user-select: x\">wwwwww</span>&lttd&gtTony&lt/td&gt<br /><span style=\"color: transparent; user-select: x\">wwwwww</span>&lttd&gt95&lt/td&gt<br /><span style=\"color: transparent; user-select: x\">wwww</span>&lt/tr&gt<br /><span style=\"color: transparent; user-select: x\">wwww</span>&lttr&gt<br /><span style=\"color: transparent; user-select: x\">wwwwww</span>&lttd&gtKyle&lt/td&gt<br /><span style=\"color: transparent; user-select: x\">wwwwww</span>&lttd&gt85&lt/td&gt<br /><span style=\"color: transparent; user-select: x\">wwww</span>&lt/tr&gt<br /><span style=\"color: transparent; user-select: x\">ww</span>&lt/tbody&gt<br /><span style=\"color: transparent; user-select: x\">ww</span>&lttfoot&gt<br /><span style=\"color: transparent; user-select: x\">wwww</span>&lttr&gt<br /><span style=\"color: transparent; user-select: x\">wwwwww</span>&lttd&gtAverage&lt/th&gt<br /><span style=\"color: transparent; user-select: x\">wwwwww</span>&lttd&gt90&lt/th&gt<br /><span style=\"color: transparent; user-select: x\">wwww</span>&lt/tr&gt<br /><span style=\"color: transparent; user-select: x\">ww</span>&lt/tfoot&gt<br />&lt/table&gt</code><img style=\"width: 80%; margin-top: 20px; margin-inline: 10%\" src=\"/media/references/table1.png\" alt=\"table structure image\" /><p>The &lttable&gt tags wrap up three sections of the table: &ltthead&gt, &lttbody&gt, and &lttfoot&gt. No matter what the section is, a row is always created by the &lttr&gt tags. The &ltthead&gt is the table header row and each data cell in this row is created by the &ltth&gt tags. &lttbody&gt contains the actual data of the table, and &lttfoot&gt contains summary information. Each data cell in both &lttbody&gt and &lttfoot&gt sections is enclosed by the &lttd&gt tags. Here's the output of the example above:</p>[LAB]<p><span style=\"font-size: 17px\">Note: We added <i>border: 1px solid black;</i> to th and td so the table has borders. Add <i>border-collapse: collapse;</i> to the table tag to make the borders collapse.</span><br /><br />So the above information is the neccesary steps of creating HTML tables. I know it's a bit confusing, but practice makes perfect, you just need to keep trying and practicing and you will master this skill. For additional guide and styling tips on tables.</p>",
      "unit": "HTML Tags",
      "articleName": "Creating Tables",
      "articleDate": "6.15.2023",
      "articleRelease": "6.15.2023",
      "author": "Tony",
      "interactiveHTML": "<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Tony</td>\n      <td>95</td>\n    </tr>\n    <tr>\n      <td>Kyle</td>\n      <td>85</td>\n    </tr>\n  </tbody>\n  <tfoot>\n    <tr>\n      <td>Average</td>\n      <td>90</td>\n    </tr>\n  </tfoot>\n</table>",
      "interactiveCSS": "td,\nth {\n  border: 1px solid black;\n}",
      "id": 6,
      "sidebarText": "Table Tags"
    },
    {
      "paragraph": "<p>To code a website, we need a <i>code editor</i>, so you can code on it.</p><p>Most people use Microsoft's <strong>Visual Studio Code (VS Code)</strong> as thier code editor, but you can also use Replit, Sublime Text, TextEdit, or even Notepad. But because of its efficiency, power, and ease of use, VS Code is recomended for code editing.</p><img src=\"/media/references/vs1.jpg\" alt=\"Visual Studio Code logo\" style=\"width: 30%; margin-inline: 35%; border-radius: 10px\" /><figcaption>Visul Studio Code 2022 logo.</figcaption><p>To install VS Code, click on <a href=\"https://code.visualstudio.com/download\" target=\"_blank\"> their official website</a> and coose the version that maches your operating system, then download it and follow the steps bellow:</p><h2 class=\"article-subheading\">1. Click the downloaded file at the bottom-left corner.</h2><img src=\"/media/references/vs2.png\" alt=\"Step1\" /><h2 class=\"article-subheading\">2. Select \"I accept\" and click \"Next\".</h2><img src=\"/media/references/vs3.png\" alt=\"Step2\" /><h2 class=\"article-subheading\">3. Select \"Create a desktop icon\", and click \"Next\".</h2><img src=\"/media/references/vs4.png\" alt=\"Step3\" /><h2 class=\"article-subheading\">4. Click \"Install\".</h2><img src=\"/media/references/vs5.png\" alt=\"Step4\" /><h2 class=\"article-subheading\">5. Click \"Finish\" and VS Code should launch!</h2><img src=\"/media/references/vs6.png\" alt=\"Step5\" /><p>If it doesn't launch, go check if there is a VS Code icon on your desktop. If you still have any problems, feel free to search online for other VS Code installing tutorials!</p>",
      "unit": "Web Development",
      "articleName": "Installing Visual Studio Code",
      "articleDate": "6.8.2024",
      "articleRelease": "2.11.2023",
      "author": "Tony",
      "id": 7,
      "sidebarText": "Installing VS Code"
    }
  ]
}
